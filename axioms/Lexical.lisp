;; Deep Lexical Semantics Axioms
;;
;; These are axioms from
;;   https://github.com/nmontazeri/Change-of-State-Axioms
;; converted to Common Logic.

(forall (e x)
  (if (die-v1-4' e x)
      (exists (e0)
        (and (changeFrom' e e0) (function' e0 x)))))

(forall (e x y)
  (if (die-v5' e x y)
      (exists (e0)
        (and (changeFrom' e e0) (want' e0 x y)))))

(forall (e x y)
  (if (die-v6' e x y)
      (exists (ha0)
        (and (want' e x y) (extreme' ha0 e)))))

(forall (e x)
  (if (die-v10' e x)
      (exists (e0)
        (and (changeFrom' e e0) (Rexist' e0 x)))))

(forall (e p0 p1 x)
  (if (move-s0' e x p0 p1)
      (exists (e0 e1)
        (and (changeFrom' e e0 e1) (at' e0 x p0) (at' e1 x p1)))))

(forall (e p0 p1 x)
  (if (move-v7' e x p0 p1)
      (exists (ha0 ha1)
        (and (move-s0' e x p0 p1) (subject' ha0 p0) (subject' ha1 p1)))))

(forall (e p0 p1 x)
  (if (move-v1' e x p0 p1)
      (exists (ha0 ha1 p2)
        (and (move-v7' e x p0 p1) (location' ha0 p1) (location' ha1 p2)))))

(forall (e p0 p1 x)
  (if (move-v4' e x p0 p1)
      (exists (ha0 ha1 p2)
        (and (move-v7' e x p0 p1) (affiliation' ha0 p1)
             (affiliation' ha1 p2)))))

(forall (e x)
  (if (move-v68' e x)
      (act' e x)))

(forall (e p0 p1 x y)
  (if (move-v23' e x y p0 p1)
      (exists (e0 ha0 ha1)
        (and (cause' e x e0) (move-v7' e0 y p0 p1) (location' ha0 p0)
             (location' ha1 p1)))))

(forall (e x y)
  (if (move-v12' e x y)
      (exists (p0 p1)
        (and (move-v23' e x y p0 p1) (sell' e x y)))))

(forall (e e0 x y)
  (if (move-v911' e x y e0)
      (exists (ha0 ha1)
        (and (cause' e x e0) (mental-event' ha0 e0) (arg' ha1 y e0)))))

(forall (e x y)
  (if (move-v10' e x y)
      (exists (e0)
        (and (move-v911' e x y e0) (move-v68' e0 y)))))

(forall (e e0 x)
  (if (move-n1' e0 e x)
      (move-v68' e x)))

(forall (e e0 p0 p1)
  (if (move-n2' e0 e p0 p1)
      (exists (x)
        (move-v4' e x p0 p1)))))

(forall (e x)
  (if (move-n3' e x)
      (exists (ha0 ha1 p0 p1 y)
        (and (move-v1' e y p0 p1) (physicalPartOf' ha0 y x)
             (agentOf' ha1 x e)))))

(forall (e e0 x)
  (if (move-n4' e e0 x)
      (exists (p0 p1)
        (move-v1' e0 x p0 p1)))))

(forall (e e0 p0 p1)
  (if (movement-n9' e e0 p0 p1)
      (exists (e2 e3 x)
        (and (change' e x e2 e3) (hasOpinion' e2 x p0)
             (hasOpinion' e3 x p1)))))

(forall (e e0 x)
  (if (movement-n6' e e0 x)
      (exists (e2 e3 ha0)
        (and e0 is series of e2  that are (move-n1' e3 e2 x)
             (people' ha0 x)))))

(forall (e x)
  (if (movement-n4' e x)
      (exists (e0)
        (movement-n6' e e0 x)))))

(forall (e x)
  (if (movement-n10' e x)
      (exists (e0 e1 p0 p1 y)
        (and (cause' e0 x e1) (move-s0' e1 y p0 p1)))))

(forall (e e1 x)
  (if (retire-v2' e x e1)
      (exists (e2 ha0)
        (and (decrease' e e2) (levelOf' e2 e1) (activityOf' ha0 e1 x)))))

(forall (e x)
  (if (retire-v1' e x)
      (exists (e1 ha0)
        (and (retire-v2' e x e1) (work' ha0 e1)))))

(forall (e0 e1 x y)
  (if (retire-v6' e0 y x e1)
      (exists (e)
        (and (cause' e0 y e) (retire-v1' e x)))))

(forall (e x y)
  (if (retire-v7' e x y)
      (exists (e0 e1)
        (and (retire-v6' e0 y x e1) (use' e1 x y)))))

(forall (e x)
  (if (retire-v11' e x)
      (exists (e1)
        (and (retire-v2' e x e1) (daily-activity' e1)))))

(forall (e x)
  (if (retire-v5' e x)
      (exists (e1 e2 ha0 ha1)
        (and (retire-v2' e x e1) (intend' ha0 x e2) (temporary' e2 e)
             (gathering' ha1 e1)))))

(forall (e x y)
  (if (retire-v8' e x y)
      (exists (e1 ha0)
        (and (retire-v2' e x e1) (interestedIn' ha0 e1 x y)))))

(forall (e x y)
  (if (retire-v3' e x y)
      (exists (e1 ha0 ha1 t)
        (and (changeFrom' e e1) (at' e1 x y) (timeSpanOf' ha0 t e1)
             (relatively-long??' ha1 t)))))

(forall (e e0)
  (if (kick-n1' e0 e)
      (exists (x y)
        (kick-s1' e x y)))))

(forall (e e0)
  (if (kick-n3' e0 e)
      (exists (x)
        (kick-v5' e x)))))

(forall (e e0)
  (if (kick-n5' e e0)
      (exists (ha0 x y)
        (and (affect' e0 x y) (sudden' ha0 e0)))))

(forall (e x y)
  (if (kick-s0' e x y)
      (exists (e1 e2)
        (and (cause' e x e1) (changeFrom' e1 e2) (rel' e2 y x)))))

(forall (e x y)
  (if (kick-v1' e x y)
      (exists (e1 ha0 ha1 z)
        (and (kick-s0' e x y) (hit-s11' e1 z y) (foot' ha0 z x)
             (gen' ha1 e e1)))))

(forall (e x y)
  (if (kick-s1' e x y)
      (exists (e1 ha0 z)
        (and (cause' e x e1) (hit-s11' e1 z y) (foot' ha0 z x)))))

(forall (e e3)
  (if (pass-s0' e e3)
      (exists (e1 e2 ha0)
        (and (and' e e1 e2) (changeTo' e1 e3) (changeFrom' e2 e3)
             (before' ha0 e1 e2)))))

(forall (e s x y)
  (if (pass-s5' e x y s)
      (exists (e3)
        (and (pass-s0' e e3) (rel' e3 x y s)))))

(forall (e s x y)
  (if (pass-s1' e x y s)
      (exists (e3 ha0 p)
        (and (pass-s0' e e3) (at' e3 x p s) (at' ha0 y p s)))))

(forall (e t)
  (if (pass-v4' e t)
      (exists (e3 ha0 s t0)
        (and (pass-s0' e e3) (at' e3 t t0 s) (time' ha0 s)))))

(forall (e t x)
  (if (pass-v10' e x t)
      (exists (e1 e2)
        (and (cause' e x e1) (feel' e1 x e2) (pass-v4' e2 t)))))

(forall (e p x)
  (if (pass-s4' e x p)
      (exists (e0 e1 ha0)
        (and (changeFrom' e e1) (at' e1 x p) (changeTo' e0 e1)
             (before' ha0 e0 e)))))

(forall (e x y)
  (if (pass-v25' e x y)
      (exists (e0 p)
        (and (cause' e x e0) (pass-s4' e0 y p)))))

(forall (e x y)
  (if (pass-s2' e x y)
      (exists (e1 p)
        (and (cause' e x e1) (pass-s4' e y p)))))

(forall (e x y z)
  (if (pass-s3' e x y z)
      (exists (e1 e2 e3 e4 e5 e6 ha0)
        (and (cause' e x e1) (and' e e1 e2) (before' ha0 e1 e2)
             (changeTo' e1 e3) (have' e3 x y) (change' e2 e3 e4)
             (have' e4 z y) (not' e5 e6) (use' e6 x y)))))

(forall (e y z)
  (if (pass-v18-21' e y z)
      (exists (e0 e1 e3 e4 e5 e6 x)
        (and (change' e e3 e4) (have' e3 x y) (changeTo' e0 e1)
             (have' e4 z y) (not' e5 e6) (use' e6 x y)))))

(forall (e x y z)
  (if (pass-s6' e x y z)
      (exists (e0 e1 e3 e4 e5 e6)
        (and (cause' e x e1) (change' e1 e3 e4) (have' e3 x y)
             (changeTo' e0 e1) (have' e4 z y) (not' e5 e6) (use' e6 x y)))))

(forall (e ha0 x z)
  (if (pass-v20' ha0 e x z)
      (exists (ha1 ha2 ha3 y)
        (and (pass-s6' e x y z) (ball' ha1 y) (player' ha2 x)
             (player' ha3 z)))))

(forall (e p0 x)
  (if (pass-v6' e x p0)
      (exists (s)
        (at' e x p0 s)))))

(forall (e p0 x)
  (if (pass-v19' e x p0)
      (exists (e1 s)
        (and (changeTo' e e1) (at' e1 x p0 s)))))

(forall (e x)
  (if (pass-adj1' e x)
      (exists (e0 ha0 p)
        (and (pass-v20' e0 x) (arg' ha0 x p)))))

(forall (e e0)
  (if (pass-n3' e e0)
      (exists (ha0 x z)
        (pass-v20' ha0 e x z)))))

(forall (e e0 p)
  (if (pass-n5-6' e p e0)
      (enable' p e0)))

(forall (e e0)
  (if (pass-n7' e0 e)
      (exists (s x y)
        (pass-s1' e x y s)))))

(forall (e e0)
  (if (pass-n14' e e0)
      (pass-s0' e e0)))

(forall (e e1 t x)
  (if (pass-n16' e e1 x t)
      (exists (e0)
        (pass-v14-9' e1 x t e0)))))

(forall (e e0)
  (if (pass-n11' e e0)
      (exists (e1 e2 e3 ha0 ha1 ha2 p1 p2 p3 x)
        (and (change' e0 e1 e2) (at' e1 x p1) (at' e2 x p3) (not' ha0 e3)
             (at' e3 x p2) (before' ha1 p1 p2) (before' ha2 p2 p3)))))

(forall (e e0)
  (if (pass-n8-9' e e0)
      (exists (ha0 ha1)
        (and (condition' ha0 e0) (difficult' ha1 e0)))))

(forall (e g m0 x)
  (if (circulate-v1-6' e x m0 g)
      (exists (e0 e1 e2 e3 ha0 ha1 m1)
        (and (eventSequence' e e0 e1) (change' e0 e2 e3) (rel' e2 x m0)
             (rel' e3 x m1) (circulate-v1' e1 x m1) (member' ha0 m0 g)
             (member' ha1 m1 g)))))

(forall (e g m0 x)
  (if (circulate-v2-3' e m0 x g)
      (exists (e0 e1 e10 e11 e2 e3 ha0 ha1 m1)
        (and (eventSequence' e11 e10 e1) (cause' e m0 e0) (change' e0 e2 e3)
             (rel' e2 x m0) (rel' e3 x m1) (circulate-v2-3' e1 m1 x)
             (member' ha0 m0 g) (member' ha1 m1 g)))))

(forall (e x)
  (if (circulate-v4' e x)
      (exists (e0 e1 ha0 p0 p1)
        (and (eventSequence' ha0 e e0 e1) (move' e0 x p0 p1)
             (move' e1 x p1 p0)))))

(forall (e x y)
  (if (circulate-v5' e x y)
      (exists (e0)
        (and (cause' e x e0) (circulate-v4' e0 y)))))

(forall (e e0)
  (if (circulation-n6' e e0)
      (exists (g m0 x)
        (circulate-v1-6' e0 x m0 g)))))

(forall (e t)
  (if (accumulate-v2' e t)
      (exists (e10 ha0 ha1 s s1 x)
        (and (iteration' ha0 e10 e) (addElt' e s s1 x) (typeOf' ha1 t x)))))

(forall (e t x)
  (if (accumulate-v1' e x t)
      (exists (e0)
        (and (cause' e x e0) (accumulate-v2' e0 t)))))

(forall (e e0)
  (if (accumulation-n1' e e0)
      (exists (t)
        (accumulate-v2' e0 t)))))

(forall (e s)
  (if (accumulation-n2' e s)
      (exists (ha0)
        (set' ha0 s)))))

(forall (e e0)
  (if (accumulation-n3' e e0)
      (exists (t x)
        (accumulate-v1' e0 x t)))))

(forall (e x y)
  (if (crash-s0' e x y)
      (and (hit-v2' e x y) (break' e x)))

(forall (e x y z)
  (if (crash-s0-1' e x y z)
      (and (hit-v12' e x y) (break' e x)))

(forall (e x)
  (if (crash-v5' e x)
      (and (break' e x) (emitSound' e x)))

(forall (e x)
  (if (crash-v7' e x)
      (emitSound' e x)))

(forall (e x)
  (if (crash-v11' e x)
      (exists (e0 e1 ha0 ha1 ha2)
        (and (change' e e1 e0) (sudden' ha0 e) (good' ha1 e1)
             (bad' ha2 e0)))))

(forall (e x)
  (if (crash-v12' e x)
      (break' e x)))

(forall (e x)
  (if (crash-n1' e x)
      (exists (ha0)
        (sound' ha0 x)))))

(forall (e e0)
  (if (crash-n2-4' e e0)
      (exists (x y)
        (crash-s0' e0 x y)))))

(forall (e e0)
  (if (crash-n3' e e0)
      (exists (x)
        (crash-v11' e0 x)))))

(forall (e e0)
  (if (crash-n5' e e0)
      (exists (x)
        (crash-v12' e0 x)))))

(forall (e x)
  (if (grow-s0' e x)
      (exists (e1)
        (and (changeTo' e e1) (Rexist' e1 x)))))

(forall (e x y)
  (if (grow-v8' e x y)
      (exists (ha0)
        (and (grow-s0' e y) (propertyOf' ha0 y x)))))

(forall (e x)
  (if (grow-s1' e x)
      (exists (ha0 s y)
        (and (increase' e y s) (sizeOf' ha0 y x)))))

(forall (e x y)
  (if (grow-s2' e x y)
      (exists (e1)
        (and (enable' e x e1) (grow-v3' e x)))))

(forall (e x)
  (if (grow-s2' e x)
      (exists (ha0 s y)
        (and (increase' e y s) (maturityOf?' ha0 y x)))))

(forall (e e0 x)
  (if (growth-n1' e e0 x)
      (grow-v3' e0 x)))

(forall (e x)
  (if (growth-n4-7' e x)
      (exists (ha0)
        (grow-v3' ha0 x)))))

(forall (e e0 x)
  (if (growth-n2' e e0 x)
      (exists (ha0 s y)
        (and (increase' e y s) (complexityOf' ha0 y x)))))

(forall (e e0 x)
  (if (growth-n3' e e0 x)
      (exists (s)
        (increase' e x s)))))

(forall (e e0)
  (if (growth-n5' e0 e)
      (exists (x)
        (grow-s0' e x)))))

(forall (e e0)
  (if (tumble-n1' e e0)
      (exists (x)
        (tumble-v11' e0 x)))))

(forall (e e0)
  (if (tumble-n2' e e0)
      (exists (x)
        (tumble-s0' e0 x)))))

(forall (e x)
  (if (tumble-s0' e x)
      (exists (e1 e2 ha0 ha1 ha2 p1 p2 s)
        (and (change' e e1 e2) (at' e1 x p1 s) (at' e x p2 s) (sudden' ha0 e)
             (verticalScale' ha1 s) (lts' ha2 p2 p1 s)))))

(forall (e x)
  (if (tumble-v1-5' e x)
      (exists (e0 ha0 ha1 s)
        (and (changeIn' e s) (structure' ha0 s x) (gen' ha1 e e0)
             (tumble-s0' e0 x)))))

(forall (e x y)
  (if (tumble-v2' e x y)
      (exists (e0)
        (and (cause' e x e0) (tumble-v1-5' e0 y)))))

(forall (e x)
  (if (tumble-v3-11' e x)
      (exists (e1 e2 ha0)
        (and (and' e e1 e2) (rise-s0' e1 x) (tumble-s0' e2 x)
             (before' ha0 e1 e2)))))

(forall (e x)
  (if (tumble-v7' e x)
      (exists (ha0)
        (undestand' ha0 x)))))

(forall (b e x)
  (if (lead-v6' e x b)
      (end-s?' e x b)))

(forall (e x y)
  (if (lead-v8-12' e x y)
      (exists (s)
        (gts' x y s)))))

(forall (d e p x y)
  (if (lead-s0' e x y p d)
      (exists (e1 ha0)
        (and (cause' e x e1) (use' e1 y p) (lead-v11' ha0 p d)))))

(forall (e e2 x)
  (if (lead-s1' e x e2)
      (exists (e0 e1 e5 ha0)
        (and (cause' e x e0) (changeTo' e0 e5)
             (eventSequence' ha0 e5 e1 e2)))))

(forall (e e2 x y)
  (if (lead-v5' e x y e2)
      (exists (ha0)
        (and (lead-s1' e x e2) (arg' ha0 y e2)))))

(forall (e s)
  (if (lead-n7' e s)
      (exists (ha0 x)
        (and (lead-v8' e x) (scoreOf' ha0 s x)))))

(forall (d e x)
  (if (lead-n3-5' e x d)
      (exists (p y)
        (lead-s0' e x y p d)))))

(forall (e0 x)
  (if (lead-n4' e0 x)
      (exists (e y)
        (lead-v7' e x y)))))

(forall (e0 x)
  (if (lead-n13' e0 x)
      (exists (e y)
        (lead-v1' e x y)))))

(forall (e x)
  (if (disappear-v3' e x)
      (exists (e0)
        (and (changeFrom' e e0) (Rexist' e0 x)))))

(forall (e x y)
  (if (disappear-v1' e x y)
      (exists (e0 ha0 l)
        (and (changeFrom' e e0) (know' e0 y l) (locationOf' ha0 l x)))))

(forall (e x y)
  (if (disappear-v2' e x y)
      (exists (e0)
        (and (changeFrom' e e0) (see' e0 x y)))))

(forall (e e0)
  (if (twist-n4' e e0)
      (exists (x)
        (twist-v1' e0 x)))))

(forall (e e0)
  (if (twist-n5' e e0)
      (exists (x y)
        (twist-v10' e0 x y)))))

(forall (e e0)
  (if (twist-n13-12' e e0)
      (exists (x y)
        (twist-v3' e0 x y)))))

(forall (e x)
  (if (twist-v6' e x)
      (exists (ha0 ha1 y)
        (and (twist-n7' ha0 y) (partOf' ha1 y x)))))

(forall (e x)
  (if (twist-v1' e x)
      (exists (a e0 ha0 p0 p1 y)
        (and (changeTo' e e0) (twist-n0' e0 y p0 a p1) (partOf' ha0 y x)))))

(forall (e x y)
  (if (twist-v4-5' e x y)
      (exists (e1)
        (and (cause' e x e1) (twist-v1' e1 y)))))

(forall (e x y)
  (if (twist-v10' e x y)
      (exists (a e0 ha0 ha1 p0 p1 z)
        (and (cause' e x e0) (twist-n0' ha0 e0 z p0 a p1) (at' ha1 y a)))))

(forall (e x y)
  (if (twist-v3' e x y)
      (exists (a e0 ha0 ha1 p0 p1 z)
        (and (cause' e x e0) (twist-n0' ha0 e0 z p0 a p1) (at' ha1 y p1)))))

(forall (e x y)
  (if (twist-v9' e x y)
      (exists (e0 ha0)
        (and (cause' e x e0) (changeIn' e0 y) (meaning' ha0 y)))))

(forall (e e0)
  (if (decay-n1' e0 e)
      (exists (x)
        (decay-v2' e x)))))

(forall (e x)
  (if (decay-v2' e x)
      (exists (e1 e2 ha0 ha1)
        (and (changeIn' e x e1 e2) (worse' ha0 e2 e1) (gradula' ha1 e)))))

(forall (e0 e1 x y)
  (if (return-n25' e0 e1 x y)
      (return-v1' e1 x y)))

(forall (e e0 z)
  (if (return-n3' e e0 z)
      (exists (e1 e2 x y)
        (and (change' e0 e1 e2) (move' e1 z x y) (move' e2 z y x)))))

(forall (e e0 x y z)
  (if (return-n4' e e0 z x y)
      (exists (e1 e10 e2 ha0)
        (and (change' e10 e2 e1) (change' e0 e1 e2) (have' e1 x z)
             (have' e2 y z) (before' ha0 e10 e0)))))

(forall (e e0 e2 x)
  (if (return-n8' e e0 x e2)
      (exists (e1)
        (return-v8' e0 x e1 e2)))))

(forall (e e0 e2)
  (if (return-n10' e e0 e2)
      (exists (e1 x)
        (return-v8' e0 x e1 e2)))))

(forall (e e0 e1)
  (if (return-n7' e1 e e0)
      (exists (x)
        (return-v9' e e0 x)))))

(forall (e e0 e1 x)
  (if (return-n13' e1 e x e0)
      (return-v9' e e0 x)))

(forall (e0 p x y)
  (if (return-v5' e0 x y p)
      (exists (e1)
        (and (cause' e0 x e1) (return-v1' e1 y p)))))

(forall (e x y z)
  (if (return-v2-10' e x z y)
      (exists (e1 e2 e3 ha0)
        (and (cause' e x e1) (changeTo' e1 e2) (have' e2 y z)
             (changeFrom' e3 e2) (before' ha0 e3 e)))))

(forall (e e0 x)
  (if (return-v3' e x e0)
      (exists (e1 e2 ha0 ha1)
        (and (changeTo' e2 e0) (changeFrom' e1 e0) (arg' ha0 x e0)
             (before' ha1 e1 e)))))

(forall (e x y)
  (if (return-v1' e x y)
      (exists (e0)
        (and (return-v3' e x e0) (at' e0 x y)))))

(forall (e e0 x)
  (if (return-v9' e e0 x)
      (return-v3' e x e0)))

(forall (e x y)
  (if (return-v4' e x y)
      (exists (ha0 s)
        (and (mention' e x y) (lts' ha0 y x s)))))

(forall (e e0)
  (if (burst-n1' e e0)
      (exists (x)
        (burst-s0' e0 x)))))

(forall (e e1 e10)
  (if (burst-n3-4' e e10 e1)
      (exists (e0 x)
        (burst-s1' e10 x e0 e1)))))

(forall (e x)
  (if (burst-s0' e x)
      (explode-v2' e x)))

(forall (e e0 e1 x)
  (if (burst-s1' e x e0 e1)
      (exists (ha0 ha1)
        (and (change' e e0 e1) (arg' ha0 x e) (sudden' ha1 e)))))

(forall (e x y)
  (if (burst-v5' e x y)
      (exists (e0 e1)
        (and (and' e e0 e1) (active' e0 y) (in' e1 y x)))))

(forall (e x)
  (if (loop-v1' e x)
      (exists (e0 e1 p0 p1)
        (and (eventSequence' e e0 e1) (move-v1' e0 x p0 p1)
             (move-v1' e1 x p1 p0)))))

(forall (e x y)
  (if (loop-v3' e x y)
      (exists (e0)
        (and (cause' e x e0) (loop-v1' e0 y)))))

(forall (e e0)
  (if (loop-n10' e0 e)
      (exists (x)
        (loop-v1' e x)))))

(forall (e0 e1)
  (if (loop-n3' e0 e1)
      (exists (e ha0)
        (iteration' ha0 e e1)))))

(forall (e e0 e1)
  (if (transition-v2-0' e e0 e1)
      (exists (ha0 ha1 s)
        (and (change' e e0 e1) (inScale' ha0 e0 s) (inScale' ha1 e1 s)
             (gradedMove' e e0 e1)))))

(forall (e e0 e1 x)
  (if (transition-v2' e x e0 e1)
      (and (transition-v2-0' e e0 e1) (at' x e0) (at' x e1)))

(forall (e e0 e1 x y)
  (if (transition-v1' e x y e0 e1)
      (exists (e2)
        (and (cause' e x e2) (transition-v2' e2 y e0 e1)))))

(forall (e e2)
  (if (transition-n1-3' e e2)
      (exists (e0 e1 x)
        (transition-v2' e2 x e0 e1)))))

(forall (e e2)
  (if (transition-n2' e e2)
      (exists (e0 e1 e3 ha0 ha1 x)
        (and (event' ha0 e2) (cause' ha1 e2 e3) (transition-v2' e3 x e0 e1)))))

(forall (e z)
  (if (pat-n1' e z)
      (exists (ha0 x y)
        (and (pat-v1-2' e x y) (sound-of' ha0 z e)))))

(forall (e e0)
  (if (pat-n2' e e0)
      (exists (x y)
        (pat-v1-2' e0 x y)))))

(forall (e x y)
  (if (pat-v1-2' e x y)
      (exists (e1 e2 e3 ha0 ha1 z)
        (and (cause' e x e1) (changeTo' e1 e2) (at' e2 y z) (gen' ha0 e2 e3)
             (impact' e3 y z) (light' ha1 e3)))))

(forall (e t)
  (if (target-n1-2-3-4' e t)
      (exists (e0 e1 e2 x y)
        (and (intend' e x e0) (cause' e0 x e1) (changeTo' e1 e2)
             (at' e2 y t)))))

(forall (e e2 t)
  (if (target-n5' e t e2)
      (exists (e3 ha0 ha1 ha2 x)
        (and (intend' ha0 x e3) (changeTo' e3 t) (agentOf' ha1 x e2)
             (gen' ha2 e2 e3)))))

(forall (e t x y)
  (if (target-v1' e x y t)
      (exists (e0 e1 e2)
        (and (intend' e x e0) (cause' e0 x e1) (changeTo' e1 e2)
             (at' e2 y t)))))

(forall (e x y)
  (if (abridge-s0' e x y)
      (exists (e0 e1 z)
        (and (cause' e x e0) (changeFrom' e0 e1) (Rexist' e1 z)
             (member' e1 z y)))))

(forall (e p x)
  (if (depart-s0' e x p)
      (exists (e1 ha0 t)
        (and (changeFrom' e e1) (at' e1 x p) (durationOf' t e1)
             (relatively-long' ha0 t)))))

(forall (e p x)
  (if (depart-v134' e x p)
      (exists (ha0)
        (and (depart-s0' e x p) (location' ha0 p)))))

(forall (e p x)
  (if (depart-v6' e x p)
      (exists (ha0)
        (and (depart-v134' e x p) (path' ha0 p)))))

(forall (e e1 x)
  (if (depart-v5' e x e1)
      (exists (ha0 p)
        (and (depart-s0' e x p) (position' ha0 p)))))

(forall (e x y)
  (if (depart-v2' e x y)
      (exists (e1)
        (and (changeFrom' e e1) (similar' e1 x y)))))

(forall (e e0)
  (if (depart-n1' e0 e)
      (exists (p x)
        (depart-s0' e x p)))))

(forall (e e0)
  (if (depart-n2' e0 e)
      (exists (x)
        (depart-v2' e x)))))

(forall (e e0)
  (if (depart-n3' e e0)
      (exists (ha0 p x)
        (and (depart-s0' e x p) (life' ha0 p)))))

(forall (e x y)
  (if (loose-s0' e x y)
      (exists (e0 e1 ha0 ha1)
        (and (changeFrom' e e0) (rel' e0 x y) (not' ha0 e1) (intend' e1 x e)
             (favor' ha1 x e0)))))

(forall (e e0 x y)
  (if (lose-s1' e x y e0)
      (exists (e2 ha0)
        (and (not' e e2) (changeTo' e2 e0) (rel' e0 x y) (favor' ha0 x e0)))))

(forall (e0 y)
  (if (loss-n1' e0 y)
      (exists (e x)
        (lose-v6' e x y)))))

(forall (e e1)
  (if (loss-n3' e e1)
      (exists (e0 x y)
        (lose-s1' e1 x y e0)))))

(forall (e y)
  (if (loss-n6' e y)
      (exists (e0 e1 x)
        (lose-s1' e1 x y e0)))))

(forall (e e0)
  (if (loss-n4' e e0)
      (exists (x y)
        (loose-s0' e0 x y)))))

(forall (e e0 y)
  (if (loss-n8' e e0 y)
      (exists (x)
        (lose-v3' e0 x y)))))

(forall (e y)
  (if (loss-n7' e y)
      (exists (e0 x)
        (loose-v3' e0 x y)))))

(forall (e y)
  (if (lost-adj1-5' e y)
      (exists (e0 x)
        (loose-s0' e0 x y)))))

(forall (e0 y)
  (if (lost-adj4' e0 y)
      (exists (e x)
        (lose-v2' e x y)))))

(forall (e y)
  (if (lost-adj3' e y)
      (exists (e0 x)
        (lose-v3' e0 x y)))))

(forall (e x)
  (if (lost' e x)
      (loose-s0' e x x)))

(forall (e x)
  (if (lost-adj6' e x)
      (exists (e0 y)
        (and (lose-s1' e x y e0) (perceive' e0 x y)))))

(forall (e e0 x)
  (if (keep-v2-12' e x e0)
      (exists (e1 ha0)
        (and (not' e e1) (changeFrom' e1 e0) (arg' ha0 x e0)))))

(forall (e e0 x y)
  (if (keep-v1-22' e x y e0)
      (exists (e1)
        (and (cause' e x e1) (keep-v2-12' e1 y e0)))))

(forall (e x y)
  (if (keep-s1' e x y)
      (exists (e0 e1)
        (and (not' e e1) (changeFrom' e1 e0) (rel' e0 x y)))))

(forall (e x y z)
  (if (keep-v16' e x y z)
      (exists (e0)
        (and (cause' e x e0) (keep-s1' e0 z y)))))

(forall (e e0 x)
  (if (keep-s1' e x e0)
      (exists (e1 e2)
        (and (not' e e1) (cause' e1 x e2) (changeFrom' e2 e0)))))

(forall (e x y z)
  (if (keep-v9-17' e x y z)
      (exists (e0 ha0 ha1 p)
        (and (keep-s1' e x e0) (at' e0 y p) (have' ha0 x p) (place' ha1 p)))))

(forall (e x y)
  (if (keep-v10-11-15' e x y)
      (exists (e0 e1 e2 ha0 ha1 ha2 p)
        (and (keep-s1' e x e0) (and' e0 e1 e2) (at' e1 y p) (have' ha0 x p)
             (place' ha1 p) (supply' ha2 e2 x y)))))

(forall (e form x)
  (if (keep-v8' e x form)
      (exists (e0 ha0 info)
        (and (putIntoForm' e info form) (enable' ha0 e e0)
             (keep-v6' e0 x info)))))

(forall (e e3 x y)
  (if (keep-v4' e x y e3)
      (exists (e0 e2)
        (and (cause' e x e0) (not' e0 e2) (changeTo' e2 e3)))))

(forall (e k)
  (if (keep-n1' e k)
      (exists (e0 ha0 x y)
        (and (keep-v10-11-15' e0 x y) (expense-of' ha0 k e0)))))

(forall (e p0 x)
  (if (stop-v9' e x p0)
      (end-v1' e x p0)))

(forall (e e0 x)
  (if (stop-v2' e x e0)
      (exists (ha0 ha1)
        (and (changeFrom' e e0) (agentOf' ha0 x e0)
             (eventSequence' ha1 e0)))))

(forall (e p0 x)
  (if (stop-v1' e x p0)
      (exists (e0 ha0 p1)
        (and (changeFrom' e e0) (move-s0' e0 x p0 p1)
             (eventSequence' ha0 e0)))))

(forall (e p0 x)
  (if (stop-v4' e x p0)
      (exists (ha0)
        (and (stop-v1' e x p0) (temporary' ha0 e)))))

(forall (e x y)
  (if (stop-v5-8-10' e x y)
      (exists (e0)
        (and (cause' e x e0) (stop-v1' e0 y)))))

(forall (e x)
  (if (stop-v11' e x)
      (exists (e0 ha0)
        (and (stop-v2' e x e0) (temporary' ha0 e)))))

(forall (e e0 x)
  (if (stop-v3-6-7' e x e0)
      (exists (e1 e2 ha0)
        (and (cause' e x e1) (not' e1 e2) (complete' e2 e0)
             (eventSequence' ha0 e0)))))

(forall (e e0)
  (if (stop-n1' e e0)
      (exists (p0 x)
        (stop-v9' e0 x p0)))))

(forall (e e0)
  (if (stop-n2' e e0)
      (exists (e1 x)
        (stop-v2' e0 x e1)))))

(forall (e e0)
  (if (stop-n3' e e0)
      (exists (p0 x)
        (stop-v4' e0 x p0)))))

(forall (e e2)
  (if (stop-n4' e e2)
      (exists (e0 e1 ha0 ha1 x)
        (and (change' e0 e1 e2) (agentOf' ha0 x e1) (not' e2 e1)
             (eventSequence' ha1 e1)))))

(forall (e0 p0)
  (if (stop-n5' e0 p0)
      (exists (e x)
        (stop-v4' e x p0)))))

(forall (e x)
  (if (stop-n10-11' e x)
      (exists (y)
        (stop-v5-8-10' e x y)))))

(forall (e e0 x)
  (if (conclude-v1' e x e0)
      (exists (e1)
        (and (changeTo' e e1) (believe' e1 x e0)))))

(forall (e e0)
  (if (conclude-v4' e e0)
      (end-v1' e e0)))

(forall (e e1 x)
  (if (conclude-v2' e x e1)
      (exists (e0 ha0 ha1)
        (and (changeTo' e e0) (last' ha0 e0 e1) (arg' ha1 x e0)))))

(forall (e0 e1)
  (if (conclusion-n1-2-5' e1 e0)
      (exists (e x)
        (conclude-v1' e x e0)))))

(forall (e e1)
  (if (conclusion-n9' e1 e)
      (exists (e0 x)
        (conclude-v1' e x e0)))))

(forall (e e0)
  (if (conclusion-n' e e0)
      (exists (e1)
        (last' e e0 e1)))))

(forall (e e0 e2)
  (if (conclusion-n6' e e0 e2)
      (exists (e1 ha0)
        (and (changeTo' e0 e1) (last' ha0 e1 e2)))))

(forall (e e1)
  (if (polish-n2' e e1)
      (exists (x)
        (perfect' e1 x)))))

(forall (e x y)
  (if (polish-v2-3' e x y)
      (exists (e0 e1)
        (and (cause' e x e0) (changeTo' e0 e1) (perfect' e1 x)
             (changeIn' e0 x)))))

(forall (e e0)
  (if (fade-n2' e e0)
      (exists (x)
        (fade-v1' e x)))))

(forall (e x)
  (if (fade-s0' e x)
      (exists (e1 e2 ha0 ha1 ha2 i p1 p2 s)
        (and (changeFrom' e e2 e1) (at' e2 i p2 s) (at' e1 i p1 s)
             (bottom' ha0 p1 s) (intensityOf' ha1 i x) (gradual' ha2 e)))))

(forall (e x)
  (if (fade-v1' e x)
      (exists (ha0 y)
        (and (fade-s0' e y) (contrastOf' ha0 y x)))))

(forall (e x)
  (if (fade-v2-4' e x)
      (exists (ha0 y)
        (and (fade-s0' e y) (vitalityOf' ha0 y x)))))

(forall (e x)
  (if (initiative-n2' e x)
      (first' e x)))

(forall (e x)
  (if (initiative-adj1' e x)
      (exists (e0 e1 e2 ha0 ha1 y)
        (and (first' e x) (before' ha0 x y) (possible?' ha1 e0)
             (cause' e0 x e1) (changeTo' e1 e2) (Rexist' e2 y)))))

(forall (e x y z)
  (if (introduce-s1' e x y z)
      (exists (e0)
        (and (cause' e x e0) (know' e0 z y)))))

(forall (e y z)
  (if (introduce-v10' e z y)
      (exists (e0z ha0)
        (startOf' ha0 e0z y)))))

(forall (e x y z)
  (if (introduce-v9' e x y z)
      (exists (e0 ha0 ha1)
        (and (cause' e x e0) (startOf' ha0 e0 z y) (lecture' ha1 y)))))

(forall (e x y z)
  (if (introduce-s0' e x z y)
      (exists (e0 e1)
        (and (cause' e x e0) (changeTo' e0 e1) (in' e1 z y)))))

(forall (e x y z)
  (if (introduce-s0-1' e x z y)
      (exists (ha0)
        (and (introduce-s0' e x z y) (environment' ha0 y)))))

(forall (e x y)
  (if (acquire-s0' e x y)
      (exists (e0)
        (and (changeTo' e e0) (rel' e0 x y)))))

(forall (e e0)
  (if (acquisition-n1' e e0)
      (exists (x y)
        (acquire-s0' e0 x y)))))

(forall (e y)
  (if (acquisition-n2' e y)
      (exists (e0 x)
        (acquire-s0' e0 x y)))))

(forall (e x)
  (if (descend-s0' e x)
      (exists (e1 e2 ha0 p1 p2 s)
        (and (change' e e1 e2) (at' e1 x p1) (at' e1 x p2)
             (lts' ha0 p2 p1 s)))))

(forall (e x)
  (if (descend-v1' e x)
      (exists (ha0 ha1 ha2 p1 p2)
        (and (descend-s0' e x) (location' ha0 p1) (location' ha1 p2)
             (vertical' ha2 e)))))

(forall (e e1)
  (if (descend-v4' e e1)
      (changeTo' e e1)))

(forall (d e o)
  (if (descend-v2' e d o)
      (ancestorOf' e o d)))

(forall (e e0 x)
  (if (descent-n1' e0 e x)
      (descend-v1' e x)))

(forall (e e0 x)
  (if (descent-n3' e e0 x)
      (exists (e1)
        (and (cause' e0 x e1) (descend-v1' e1 x)))))
;; descent-n5'(e,x):90 -> descent, declivity, fall, decline, declination,
;;   declension, downslope'(ha0,a,downward,slope,or,bend):10
;;
(forall (e x)
;;   (if (descent-n5' e x)
;;       (exists (a bend downward ha0 or slope)
;;         descent  declivity  fall  decline  declination  declension
;;         (downslope' ha0 a downward slope or bend)))))

(forall (d e e0 o)
  (if (descent-n4' e0 e d o)
      (descend-v2' e d o)))

(forall (d e0)
  (if (descent-n6' e0 d)
      (exists (e o)
        (descend-v2' e d o)))))

(forall (a e)
  (if (descent-n2' e a)
      (exists (d e1 ha0 o)
        (and (descend-v2' e1 d o) (propertyOf' ha0 a o)))))

(forall (e0 x)
  (if (land-n8' e0 x)
      (exists (ha0 ha1 l)
        (and (people' e0 x) (in' ha0 x l) (land-n5' ha1 l)))))

(forall (e e0 f p x)
  (if (land-s0' e x f p e0)
      (exists (b e1 e2 e3 ha0 ha1 ha2 s)
        (and (change' e0 e1 e2) (at' e1 x b s) (at' e2 x f s) (path' ha0 p e0)
             (long' ha1 e0) (not' e3) (changeFrom' e3 e2) (path' ha2 p e3)))))

(forall (e f x y)
  (if (land-v3-4-5' e x y f)
      (exists (e0 e1 p)
        (and (cause' e x e0) (land-s0' e0 y f p e1)))))

(forall (e f x)
  (if (land-v1' e x f)
      (exists (b e0 ha0 p s)
        (and (land-s0' e x f p e0) (lts' ha0 f b s) (fly' e0)))))

(forall (e f x y)
  (if (land-v2-7' e x y f)
      (exists (e0)
        (and (cause' e x e0) (land-s0' e0 y f)))))

(forall (e x y)
  (if (relinquish-s0' e x y)
      (exists (e0 ha0)
        (and (changeFrom' e e0) (rel' e0 x y) (intend' ha0 x e)))))

(forall (d e)
  (if (raise-n1' e d)
      (exists (ha0 p0 p1 x y)
        (and (raise-v1' e x y p0 p1) (difference' ha0 d p1 p0)))))

(forall (e e0)
  (if (raise-n3' e e0)
      (exists (p0 p1 x y)
        (raise-s0' e0 x y p0 p1)))))

(forall (e e0)
  (if (raise-n4' e0 e)
      (exists (x y)
        (raise-v8' e x y)))))

(forall (e p0 p1 x y)
  (if (raise-s0' e x y p0 p1)
      (exists (e0 e1 e2 ha0 ha1 p2 s)
        (and (cause' e x e0) (change' e0 e1 e2) (at' e1 y p0 s)
             (at' e2 y p1 s) (gts' ha0 p1 p2 s) (verticalScale' ha1 s)))))

(forall (e x y)
  (if (raise-v15' e x y)
      (exists (e1)
        (and (cause' e x e1) (rise-v15' e1 x)))))

(forall (e x y)
  (if (raise-v12-14' e x y)
      (exists (e1)
        (and (cause' e x e1) (rise-v7' e1 y)))))

(forall (e e1 x)
  (if (raise-v3' e x e1)
      (exists (e0 e2 ha0 y)
        (and (cause' e x e0) (changeTo' e0 e1) (gen' ha0 e1 e2)
             (know' e2 y e1)))))

(forall (e x z)
  (if (raise-v19' e x z)
      (exists (e0 e2 y)
        (and (cause' e x e0) (changeTo' e0 e2) (know' e2 y z)))))

(forall (e x y)
  (if (raise-v5-6' e x y)
      (exists (e1)
        (and (enable' e x e1) (grow' e1 y)))))

(forall (e e2 x)
  (if (raise-s1' e x e2)
      (exists (e1)
        (and (cause' e x e1) (changeTo' e1 e2)))))

(forall (e e0 x)
  (if (raise-v21-27' e x e0)
      (exists (e1)
        (and (raise-s1' e x e1) (active' e1 e0)))))

(forall (e x y)
  (if (raise-s1-1' e x y)
      (exists (e2)
        (and (raise-s1' e x e2) (Rexist' e2 y)))))

(forall (e e2 x)
  (if (revive-s0' e x e2)
      (exists (e1 e3 ha0)
        (and (changeTo' e e1 e2) (active' e2 x) (changeFrom' e3 e2)
             (before' ha0 e3 e)))))

(forall (e x y)
  (if (revive-v4' e x y)
      (exists (e1)
        (and (cause' e x e1) (revive-s0' e1 y)))))

(forall (e x)
  (if (revive-v5' e x)
      (exists (e2)
        (and (revive-s0' e x e2) (conscious' e2 x)))))

(forall (e x y)
  (if (revive-v1' e x y)
      (exists (e1)
        (and (cause' e x e1) (revive-v5' e1 y)))))

(forall (e e0)
  (if (revival-n1' e e0)
      (exists (e2 x)
        (revive-s0' e0 x e2)))))

(forall (e e0)
  (if (scramble-n2' e e0)
      (exists (x)
        (scramble-v1' e0 x)))))

(forall (e x)
  (if (scramble-s0' e x)
      (exists (e1 e2 ha0 p1 p2)
        (and (change' e e1 e2) (at' e1 x p1) (at' e2 x p2) (random' ha0 p2)))))

(forall (e x y)
  (if (scramble-v3' e x y)
      (exists (e0 e1 e2 ha0 ha1 s1 s2)
        (and (cause' e x e0) (change' e0 e1 e2) (relationsOf' e1 s1 y)
             (relationsOf' e2 s2 y) (subset' ha0 s2 s1) (random' ha1 e2)))))

(forall (e s x y)
  (if (deviate-s0' e x y s)
      (exists (e3 e4 p)
        (and (or' e e3 e4) (deviate-v2' e3 x y s) (deviate-s1' e4 x p s)))))

(forall (e p s x)
  (if (deviate-s1' e x p s)
      (exists (e1 y)
        (and (not' e e1) (at' e1 x y s)))))

(forall (e s x y)
  (if (deviate-v2' e x y s)
      (exists (e1 p0)
        (and (not' e e1) (at' e1 x p0 s) (at' y p0 s)))))

(forall (e x y)
  (if (deviate-v1' e x y)
      (exists (e1 s)
        (and (changeTo' e e1) (deviate-s0' e x y s)))))

(forall (e x y z)
  (if (deviate-v3' e z x y)
      (exists (e1 ha0 p s)
        (and (cause' e z e1) (deviate-s1' e1 x p s) (path' ha0 p)))))

(forall (e s x)
  (if (deviate-adj1' e x s)
      (exists (ha0 y)
        (and (deviate-v2' e x y s) (norm' ha0 y)))))

(forall (e0 x)
  (if (deviate-n' e0 x)
      (exists (e ha0 ha1 s y)
        (and (deviate-adj' e x y s) (sexualBehavior' ha0 s)
             (person' ha1 x)))))

(forall (e e0)
  (if (deviation-n1' e e0)
      (exists (s x y)
        (deviate-v2' e0 x y s)))))

(forall (e s x)
  (if (deviation-n2' e x s)
      (deviate-adj1' e x s)))

(forall (e s x)
  (if (deviation-n3' e x s)
      (deviate-adj1' e x s)))

(forall (e e0 p0 p1 x)
  (if (deviation-n5' e e0 x p0 p1)
      (exists (e1 e2 s)
        (and (change' e e1 e2) (at' e1 x p0 s) (at' e2 x p1 s)))))

(forall (e e0 x)
  (if (bring-v3' e x e0)
      (exists (e2)
        (and (cause' e x e2) (changeTo' e2 e0)))))

(forall (e e0 x y)
  (if (bring-v2-5-11' e x y e0)
      (exists (ha0)
        (and (bring-v3' e x e0) (arg' ha0 y e0)))))

(forall (e x y z)
  (if (bring-s0' e x y z)
      (exists (e0)
        (and (bring-v3' e x e0) (have' e0 z y)))))

(forall (e x y z)
  (if (bring-v8' e x y z)
      (exists (ha0)
        (and (bring-s0' e x y z) (quality' ha0 y)))))

(forall (e m x)
  (if (bring-v9' e x m)
      (exists (b e1 ha0 ha1 z)
        (and (bring-s0' e x m z) (money' ha0 m) (sell' e1 z x b)
             (gen' ha1 e1 e)))))

(forall (e p0 p1 x z)
  (if (bring-v1' e x z p0 p1)
      (exists (e0 e1 e2)
        (and (cause' e x e0) (change' e0 e1 e2) (at' e1 z p0)
             (at' e2 z p1)))))

(forall (e p0 p1 x)
  (if (drop-s0' e x p0 p1)
      (exists (e3 e4 ha0 ha1 s)
        (and (change' e e3 e4) (at' e3 x p0) (at' e4 x p1) (lts' ha0 p1 p0 s)
             (vertical' ha1 s)))))

(forall (e x y)
  (if (drop-s0-2' e x y)
      (exists (e0 p0 p1)
        (and (cause' e x e0) (drop-s0' e y p0 p1)))))

(forall (e p0 p1 x z)
  (if (drop-s0-1' e x p0 p1 z)
      (exists (e0 e2 ha0)
        (and (changeFrom' e e0) (hold' e0 z x) (gen' ha0 e e2)
             (drop-s0' e2 x p0 p1)))))

(forall (e p0 p1 x y z)
  (if (drop-s-0-1-1' e x y p0 p1 z)
      (exists (e1)
        (and (cause' e x e1) (drop-s0-1' e1 y p0 p1 z)))))

(forall (e p0 p1 x y)
  (if (drop-v1' e x y p0 p1)
      (drop-s-0-1-1' e x y p0 p1 x)))

(forall (e x y)
  (if (drop-s18-19-10' e x y)
      (exists (e0 e1 ha0 ha1)
        (and (not' e e1) (changeTo' e0 e1) (arg' ha0 x e1) (arg' ha1 y e1)))))

(forall (e e0 x)
  (if (drop-v7' e x e0)
      (exists (ha0 ha1)
        (and (changeFrom' e e0) (arg' ha0 x e0) (eventuality' ha1 e0)))))

(forall (e x y z)
  (if (drop-v5' e x y z)
      (exists (e0 e1)
        (and (cause' e x e0) (changeFrom' e0 e1) (rel' y z)))))

(forall (e x y)
  (if (drop-v14' e x y)
      (drop-v5' e x y x)))

(forall (e x)
  (if (rise-s0' e x)
      (exists (e1 e2 ha0 ha1 p1 p2 s)
        (and (change' e e1 e2) (at' e1 x p1) (at' e2 x p2) (gts' ha0 p2 p1 s)
             (vertical' ha1 s)))))

(forall (e x)
  (if (rise-v15' e x)
      (exists (b ha0)
        (and (rise-s0' e b) (top-boundary' ha0 b x)))))

(forall (e p1 p2 x)
  (if (decrease-v1' e x p1 p2)
      (exists (e1 e2 ha0)
        (and (change' e e1 e2) (at' e1 x p1) (at' e2 x p2) (lts' ha0 p2 p1)))))

(forall (e x y)
  (if (decrease-v2' e x y)
      (exists (e1 p1 p2)
        (and (cause' e x e1) (decrease-v1' e1 y p1 p2)))))

(forall (e e0)
  (if (decrease-n1' e e0)
      (exists (p1 p2 x)
        (decrease-v1' e0 x p1 p2)))))

(forall (e e0)
  (if (decrease-n2' e e0)
      (exists (ha0 p1 p2 x y)
        (and (decrease-v1' e0 y p1 p2) (propertyOf' ha0 y x)))))

(forall (d e)
  (if (decrease-n3' e d)
      (exists (e0 ha0 p1 p2 y)
        (and (decrease-v1' e0 y p1 p2) (difference' ha0 d p1 p2)))))

(forall (e e0)
  (if (decrease-n4' e0 e)
      (exists (x y)
        (decrease-v2' e x y)))))

(forall (e e0)
  (if (repeat-v3' e e0)
      (exists (e1 ha0)
        (and (changeTo' e e0) (changeTo' e1 e0) (before' ha0 e1 e)))))

(forall (e e0 x)
  (if (repeat-v2-5' e x e0)
      (exists (ha0)
        (and (repeat-v3' e e0) (agentOf' ha0 x e0)))))

(forall (e x y)
  (if (repeat-v1-6' e x y)
      (exists (e0)
        (and (repeat-v3' e e0) (state' e0 x y)))))

(forall (e e0 x)
  (if (repeat-v4' e x e0)
      (exists (e11 ha0 ha1 y)
        (and (changeTo' e e11) (agentOf' ha0 x e11) (subst' ha1 x e11 y e0)))))

(forall (e e0)
  (if (repeat-n1' e e0)
      (exists (e1)
        (repeat-v3' e1 e0)))))

(forall (e x)
  (if (develop-s0' e x)
      (exists (e1)
        (and (changeTo' e e1) (Rexist' e1 x)))))

(forall (e x y)
  (if (develop-s0-1' e x y)
      (exists (e1)
        (and (cause' e x e1) (develop-s0' e1 y)))))

(forall (e x y)
  (if (develop-s2' e x y)
      (exists (ha0)
        (and (develop-s0' e y) (propertyOf' ha0 y x)))))

(forall (e x)
  (if (develop-s1' e x)
      (exists (ha0 s y)
        (and (increase' e y s) (propertiesOf' ha0 y x)))))

(forall (e x y)
  (if (develop-s1-1' e x y)
      (exists (e1)
        (and (cause' e x e1) (develop-s1' e1 y)))))

(forall (e x y)
  (if (develop-v18' e x y)
      (exists (ha0)
        (and (develop-s1-1' e x y) (positionOf' ha0 y x)))))

(forall (e x y)
  (if (develop-v6' e x y)
      (exists (ha0)
        (and (develop-s1-1' e x y) (usabilityOf' ha0 y x)))))

(forall (e x z)
  (if (develop-v8' e x z)
      (exists (being e1 e2 e3 ha0 ha1 ha2 p s y z?)
        (and (cause' e x e1) (increase' e1 p s) (propertiesOf' p y)
             (gen' ha0 e1 e2) (changeTo' ha1 e2 e3) (e3=?y' ha2 being z?)))))

(forall (e x)
  (if (develop-v9' e x)
      (exists (s y)
        (and (increase' e y s) (detailsOf' y x)))))

(forall (e x y)
  (if (develop-v21' e x y)
      (exists (e1)
        (and (cause' e x e1) (develop-v9' e1 y)))))

(forall (e e0)
  (if (development-n1' e0 e)
      (exists (x y)
        (develop-s1-1' e x y)))))

(forall (e e0)
  (if (development-n5' e0 e)
      (exists (x y)
        (develop-v6' e x y)))))

(forall (e0 y)
  (if (development-n6' e0 y)
      (exists (e x)
        (develop-v6' e x y)))))

(forall (e e0)
  (if (development-n2' e0 e)
      (exists (x)
        (develop-s1' e x)))))

(forall (e e0)
  (if (development-n4' e0 e)
      (event' e0 e)))

(forall (e e2)
  (if (development-n7' e e2)
      (exists (e0 e1 ha0 p0 p1 s x)
        (and (change' e0 e1 e2) (at' e1 x p0 s) (at' e2 x p1 s)
             (gts' ha0 p1 p0)))))

(forall (e e0 x)
  (if (drag-n2' e x e0)
      (exists (e1 ha0)
        (and (cause' ha0 x e1) (drag-v5' e e0)))))

(forall (e e0)
  (if (drag-n3' e e0)
      (exists (x)
        (drag-v3' e x x e0)))))

(forall (e e0)
  (if (drag-n6' e e0)
      (exists (x y)
        (drag-v1' e0 x y)))))

(forall (e0 e1)
  (if (drag-n5' e1 e0)
      (exists (x)
        (drag-v6' e0 x)))))

(forall (e x y)
  (if (drag-s0' e x y)
      (exists (e1 e2 e3 ha0 ha1 p1 p2)
        (and (cause' e x e1) (change' e1 e2 e3) (at' e2 y p1) (at' e3 y p2)
             (resist' ha0 y e1) (behind' ha1 y x)))))

(forall (e x y)
  (if (fill-n2' e y x)
      (exists (e0 ha0 ha1)
        (and (substance' ha0 y) (possible' ha1 e0) (fill-v2' e x y)))))

(forall (e y)
  (if (fill-n1' e y)
      (exists (ha0 ha1 ha2 v1 v2 x)
        (and (fill-n2' e y x) (volumeOf' ha0 v1 y) (volumeOf' ha1 v2 x)
             (equal' ha2 v1 v2)))))

(forall (e x y)
  (if (fill-v2' e x y)
      (exists (ha0)
        (and (increase-s?' e y) (in' ha0 y x)))))

(forall (e x y z)
  (if (fill-v1-9-7' e x y z)
      (exists (e0)
        (and (cause' e x e0) (fill-v2' e0 y z)))))

(forall (e x y)
  (if (fill-v3' e y x)
      (exists (ha0 ha1 ha2 ha3 ha4 v1 v2)
        (and (volumeOf' ha0 v1 y) (volumeOf' ha1 v2 x) (equal' ha2 v1 v2)
             (container' ha3 x) (substance' ha4 y)))))

(forall (e p x)
  (if (fill-v4' e x p)
      (exists (ha0)
        (and (position' ha0 p) (at' e x p)))))

(forall (e p x y)
  (if (fill-v6' e x y p)
      (exists (e0)
        (and (cause' e x e0) (fill-v4' e0 y p)))))

(forall (e x y)
  (if (fill-v4-8' e x y)
      (exists (e0 ha0 s z)
        (and (at' e x y s) (expect' ha0 z e0) (at' e0 x y s)))))

(forall (e y)
  (if (cut-v25' e y)
      (exists (e0 x)
        (and (possible' e e0) (cut-v1' e0 x y)))))

(forall (e x y)
  (if (cut-v1-4-24' e x y)
      (exists (e0 e10 ha0 ha1 ha2 w z)
        (and (cause' e x e10) (changeFrom' e10 e0) (connect' e0 w z)
             (partOf' ha0 w y) (partOf' ha1 z y) (compositeEntity' ha2 y)))))

(forall (e x y)
  (if (cut-v30' e x y)
      (exists (ha0 s)
        (and (cut-v1-4-24' e x s) (surfaceOf' ha0 s y)))))

(forall (e x y)
  (if (cut-v41-29-32' e x y)
      (exists (e0 e1 z)
        (and (cause' e x e0) (changeFrom' e0 e1) (connect' e1 y z)))))

(forall (e x y z)
  (if (cut-v5-37' e x y z)
      (exists (e0 e1)
        (and (cause' e x e0) (changeFrom' e0 e1) (partOf' e1 y z)))))

(forall (e x z)
  (if (cut-v37' e x z)
      (exists (y)
        (cut-v5-37' e x y z)))))

(forall (e x y)
  (if (cut-v2-35-38' e x y)
      (exists (e1 e10 e2 ha0 p1 p2)
        (and (cause' e x e10) (change' e10 e1 e2) (at' e1 x p1) (at' e2 x p2)
             (lts' ha0 p2 p1)))))

(forall (e e0 x)
  (if (cut-v36' e x e0)
      (exists (e1 e2 ha0 ha1)
        (and (changeFrom' e e0) (eventSequence' ha0 e0 e1 e2)
             (agentOf??' ha1 x e0)))))

(forall (e x y)
  (if (cut-v27' e x y)
      (exists (e0 e1 e10 e2 ha0 ha1)
        (and (cause' e x e10) (changeFrom' e10 e0)
             (eventSequence' ha0 e0 e1 e2) (agentOf??' ha1 y e0)))))

(forall (e x)
  (if (vary-v1-3' e x)
      (changeIn' e x)))

(forall (e x y)
  (if (vary-v2' e x y)
      (exists (e0)
        (and (not' e e0) (same' e0 x y)))))

(forall (e x y)
  (if (vary-v4' e x y)
      (exists (e0 z)
        (and (cause' e x e0) (vary-v2' e0 y z)))))

(forall (e e0)
  (if (retreat-n1-7' e0 e)
      (exists (x y)
        (retreat-s0' e x y)))))

(forall (e e1)
  (if (retreat-n6' e1 e)
      (exists (e0 x)
        (retreat-s1' e x e0)))))

(forall (e0 p1)
  (if (retreat-n2-5' e0 p1)
      (exists (e x)
        (retreat-v2' e x p1)))))

(forall (e x y)
  (if (retreat-s0' e x y)
      (exists (e0 e1 e2 ha0 z)
        (and (change' e e2 e1) (at' e2 x y) (at' e1 x z) (change' e0 e1 e2)
             (before' ha0 e0 e)))))

(forall (e e0 x)
  (if (retreat-s1' e x e0)
      (exists (e1 ha0)
        (and (changeFrom' e e1) (arg' ha0 x e1)))))

(forall (e p1 x)
  (if (retreat-v2' e x p1)
      (exists (e0 e1 e2 e3 ha0 p0)
        (and (change' e e1 e2) (at' e1 x p0) (at' e2 x p1) (gen' ha0 e e3)
             (retreat-s1' e3 x e0)))))

(forall (e e0 x y)
  (if (impact-n1' e e0 x y)
      (exists (e1 e3 ha0)
        (and (changeTo' e0 e1) (at' e1 x y) (changeIn' e3 y)
             (gen' ha0 e1 e3)))))

(forall (e e0)
  (if (impact-n3' e e0)
      (exists (e1 x y)
        (impact-v2' e0 x y e1)))))

(forall (e e0)
  (if (impact-n2' e e0)
      (exists (e1 x y)
        (impact-v2' e1 x y e0)))))

(forall (e e0)
  (if (impact-n4' e e0)
      (exists (e1 e2 x y)
        (and (and' e0 e1 e2) (impact-v2' e1 x y) (impact-v2' e2 y x)))))

(forall (e e1 x y)
  (if (impact-v2' e x y e1)
      (and (cause' e x e1) (changeIn' e1 y)))

(forall (e x y z)
  (if (impact-v1' e x y z)
      (exists (e1 ha0 ha1 p)
        (and (cause' e x e1) (contact-v2' e1 y z p) (impact-v2' ha0 x y)
             (impact-v2' ha1 y x)))))

(forall (e x)
  (if (reduce-s0' e x)
      (exists (e1 e2 ha0 p1 p2)
        (and (change' e e1 e2) (at' e1 x p1) (at' e2 x p2)
             (lts' ha0 p2 p1)))))

(forall (e x y)
  (if (reduce-v1-8-11' e x y)
      (exists (e0)
        (and (cause' e x e0) (reduce-s0' e0 y)))))

(forall (e p x)
  (if (reduce-s0-1' e x p)
      (exists (ha0)
        (and (propertyOf' ha0 p x) (reduce-s0' e p)))))

(forall (e x)
  (if (reduce-v6' e x)
      (exists (ha0 p)
        (and (reduce-s0' e x p) (complexityOf' ha0 p x)))))

(forall (e x y)
  (if (reduce-v2-4-16' e x y)
      (exists (e0)
        (and (cause' e x e0) (reduce-v6' e0 x)))))

(forall (e x)
  (if (reduce-v3-5' e x)
      (exists (e0 ha0 p y)
        (and (cause' e x e0) (reduce-s0-1' e y p) (positionOf' ha0 p y)))))

(forall (e x)
  (if (reduce-v17' e x)
      (exists (ha0 p)
        (and (reduce-s0-1' e x p) (sizeOf' ha0 p x)))))

(forall (e x y)
  (if (reduce-v7-9' e x y)
      (exists (e1)
        (and (cause' e x e1) (reduce-v17' e1 y)))))

(forall (e x y)
  (if (reduce-v-118-20' e x y)
      (exists (e1 ha0 p)
        (and (cause' e x e1) (reduce-s0-1' e1 y p) (materialOf' ha0 p y)))))

(forall (e x y)
  (if (reduce-v12-15-19' e x y)
      (exists (e1 ha0 p)
        (and (cause' e x e1) (reduce-s0-1' e1 y p) (strengthOf' ha0 p y)))))

(forall (e e0)
  (if (reduction-n1' e e0)
      (exists (x y)
        (reduce-v1-8-11' e0 x y)))))

(forall (e e0)
  (if (reduction-n3' e e0)
      (exists (x y)
        (reduce-v2-4-16' e0 x y)))))

(forall (e e0 x y)
  (if (visit-n0' e e0 x y)
      (visit-s0' e0 x y)))

(forall (e x y)
  (if (visit-s0' e x y)
      (exists (e1 e2 ha0 ha1)
        (and (changeTo' e e1) (at' e1 x y) (see' e2 x y) (before' ha0 e e2)
             (in-order-to' ha1 e e2)))))

(forall (e e0 x y)
  (if (visit-v5-8' e x e0 y)
      (exists (ha0 ha1)
        (and (cause' e x e0) (patient' ha0 y e0) (badFor' ha1 e0 y)))))

(forall (e x y)
  (if (visit-v6' e x y)
      (talk' e x y)))

(forall (e y z)
  (if (replace-v2' e z y)
      (exists (e1 e3 e4 ha0 p x)
        (and (changeFrom' e4 e1) (at' e1 x p) (changeTo' e e3) (at' e3 y p)
             (before' ha0 e4 e)))))

(forall (e x y z)
  (if (replace-v1' e x z y)
      (exists (e0)
        (and (cause' e x e0) (replace-v2' e0 z y)))))

(forall (e x y z)
  (if (replace-v4' e x z y)
      (exists (ha0)
        (and (replace-v1' e x z y) (similar' ha0 z y)))))

(forall (e p x y)
  (if (replace-v3' e x y p)
      (exists (e0 e1 e2 ha0)
        (and (cause' e x e0) (changeTo' e0 e1) (at' e1 y p) (at' e2 y p)
             (before' ha0 e2 e)))))

(forall (e e0 x y z)
  (if (replacement-n1' e0 e x z y)
      (replace-v4' e x z y)))

(forall (e e0)
  (if (replacement-n5' e0 e)
      (exists (ha0 x y z)
        (and (replace-v1' e x z y) (ran-out?' ha0 y)))))

(forall (e0 z)
  (if (replacement-n4' e0 z)
      (exists (e ha0 y)
        (and (possible' ha0 e) (replace-v2' e z y)))))

(forall (e0 y z)
  (if (replacement-n26' e0 z y)
      (exists (e)
        (replace-v2' e z y)))))

(forall (e e0)
  (if (replacement-n3' e0 e)
      (exists (y z)
        (replace-v2' e z y)))))

(forall (e x)
  (if (substitute-n1-2' e x)
      (exists (e0 y)
        (and (possible' e e0) (substitute-v2-3' e x y)))))

(forall (e x y)
  (if (substitute-v2-3' e x y)
      (exists (e1 ha0 ha1 p)
        (and (at' e x p) (at' ha0 e1 y p) (supposed' ha1 e1)))))

(forall (e x y z)
  (if (substitute-v1' e x y z)
      (exists (e1 e2 e3 ha0 p)
        (and (cause' e x e1) (change' e1 e2 e3) (at' e2 y p)
             (at' ha0 e3 z p)))))

(forall (e x)
  (if (substitute-adj1-2' e x)
      (exists (e0 y)
        (and (possible' e e0) (substitute-v2-3' e0 x y)))))

(forall (e x)
  (if (substitute-adj3' e x)
      (exists (y)
        (substitute-v2-3' e x y)))))

(forall (e e3 x y)
  (if (explode-v10' e x y e3)
      (exists (c e1 e2 ha0 ha1 s x1 x2)
        (and (change' e e1 e2) (at' e1 x x1 s) (at' e2 x x2 s)
             (inside' e3 x y) (capacityOf' ha0 c y) (gts' ha1 x2 c s)))))

(forall (e x)
  (if (explode-v4' e x)
      (exists (e1 e3 ha0 y)
        (and (explode-v10' e1 x y e3) (changeFrom' e e3) (sudden' ha0 e)))))

(forall (e y)
  (if (explode-v3' e y)
      (exists (e1 e3 ha0 x)
        (and (explode-v10' e1 x y e3) (changeFrom' e e3) (sudden' ha0 e)))))

(forall (e y)
  (if (explode-v2' e y)
      (exists (c e1 e2 e3 e4 e5 f ha0 ha1 ha2 ha3 ha4 s v v1 v2 x)
        (and (change' e4 e1 e2) (at' e1 v v1 s) (at' e2 v v2 s)
             (volumeOf' ha0 v x) (inside' e3 x y) (capacityOf' ha1 c y)
             (gts' ha2 v2 c s) (changeFrom' e e3) (sudden' ha3 e)
             (changeFrom' e e5) (form' ha4 e5 f y)))))

(forall (e y z)
  (if (explode-v9' e y z)
      (exists (e1 ha0 ha1)
        (and (explode-v2' e y) (changeFrom' e e1) (intact' ha0 e1 z)
             (near' ha1 z y)))))

(forall (e x y z)
  (if (explode-v1' e x y z)
      (exists (e1)
        (and (cause' e x e1) (explode-v9' e1 y z)))))

(forall (e x z)
  (if (explode-v5' e x z)
      (exists (y)
        (explode-v1' e x y z)))))

(forall (e t x)
  (if (explode-v8' e x t)
      (exists (e1 e2 e3 ha0 y)
        (and (cause' e x e1) (changeFrom' e1 e2) (believe' e2 y e3)
             (wellFormed' ha0 e3 t)))))

(forall (e e0)
  (if (explode-n1-2' e e0)
      (exists (y z)
        (explode-v9' e0 y z)))))

(forall (e e0)
  (if (explode-n3' e e0)
      (exists (e3 x y)
        (explode-v10' e0 x y e3)))))

(forall (e n)
  (if (explode-n4' e n)
      (exists (e0 y z)
        (and (explode-v9' e0 y z) (noiseOf' e n e0)))))

(forall (e e0)
  (if (explode-n6' e e0)
      (exists (x)
        (explode-v4' e0 x)))))

(forall (e e1 e2)
  (if (reverse-n1' e e1 e2)
      (exists (ha0 ha1 ha2 s x y)
        (and (at' ha0 e1 x s) (at' ha1 e2 y s) (or' ha2 )))))

(forall (e x)
  (if (reverse-n4' e x)
      (exists (ha0 ha1 ha2 y z)
        (and (reverse-n1' e x y) (surfaceOf' ha0 x z) (coin' ha1 z)
             (designOn' ha2 y)))))

(forall (e e0)
  (if (reverse-n3' e0 e)
      (exists (e1 e2 ha0 ha1 x)
        (and (reverse-v1' e x e1 e2) (badFor' ha0 e1 x) (person' ha1 x)))))

(forall (e e0)
  (if (reverse-n6' e0 e)
      (exists (e1 e2 x)
        (reverse-v1' e x e1 e2)))))

(forall (e e1 e2 x)
  (if (reverse-v1' e x e1 e2)
      (exists (ha0 ha1 ha2)
        (and (change' e e1 e2) (reverse-n1' ha0 e1 e2) (arg' ha1 x e1)
             (arg' ha2 x e2)))))

(forall (e x)
  (if (reverse-v2' e x)
      (exists (e1 e2 ha0 y)
        (and (reverse-v1' e y e1 e2) (surfaceOf' ha0 y x)))))

(forall (e e1 e2 x y)
  (if (reverse-s0' e x y e1 e2)
      (exists (e0)
        (and (cause' e x e0) (reverse-v1' e0 y e1 e2)))))

(forall (e x y)
  (if (reverse-v3' e x y)
      (exists (e1 e2 ha0 z)
        (and (reverse-s0' e x z e1 e2) (powerOf' ha0 z y)))))

(forall (e r x)
  (if (reverse-v4' e x r)
      (exists (e1 e2 ha0 y)
        (and (reverse-s0' e x y e1 e2) (rule' ha0 r)))))

(forall (e x y z)
  (if (reverse-v5' e x y z)
      (exists (e1 e2 e3 e4 e5 e6 e7 ha0 p1 p2)
        (and (cause' e x e1) (change' ha0 e1 e2 e3) (and' e2 e4 e5)
             (at' e4 x p1) (at' e5 y p2) (and' e3 e6 e7) (at' e6 x p2)
             (at' e7 y p1)))))

(forall (e)
  (if (reverse-adj1' e)
      (exists (x y)
        (reverse-n1' e x y)))))

(forall (e e0)
  (if (exchange-n2-3-4-8' e e0)
      (exists (Y x z)
        (exchange-v1-4' e0 x z Y)))))

(forall (e e0)
  (if (exchange-n' e e0)
      (exists (a x y z)
        (exchange-s1' e0 a x y z)))))

(forall (e p)
  (if (exchange-n5-6' e p)
      (exists (e0 ha0 x y)
        (and (place' ha0 p) (enable' p e0) (exchange-v1-4' e0 x y)))))

(forall (e x y z)
  (if (exchange-v1-4' e x z y)
      (exists (e0 e1 e2 e3 e4 e5 ha0 ha1 y0 y1)
        (and (change' e e0 e1) (and' e0 e2 e3) (and' e1 e4 e5) (at' e2 y0 x)
             (at' e3 y1 z) (at' e4 y0 z) (at' e5 y1 x) (typeOf' ha0 y y0)
             (typeOf' ha1 y y1)))))

(forall (e y1 y2)
  (if (exchange-v3' e y1 y2)
      (exists (e0 e1 e2 e3 e4 e5 p0 p1 y0)
        (and (change' e e0 e1) (and' e0 e2 e3) (and' e1 e4 e5) (rel' e2 y0 p0)
             (rel' e3 y1 p1) (rel' e4 y0 p1) (rel' e5 y1 p0)))))

(forall (a e x y z)
  (if (exchange-s1' e a x y z)
      (exists (e0 e1 e2)
        (and (cause' e a e0) (change' e0 e1 e2) (rel' e1 x y)
             (rel' e2 x z)))))

(forall (e x y)
  (if (create-s0' e x y)
      (exists (e0 e1)
        (and (cause' e x e0) (changeTo' e0 e1) (Rexist' e1 y)))))

(forall (e e0)
  (if (creation-n1-3-4' e e0)
      (exists (x y)
        (create-s0' e0 x y)))))

(forall (e y)
  (if (creation-n2-6' e y)
      (exists (e0 x)
        (create-s0' e0 x y)))))

(forall (e x y)
  (if (back-n3' e x y)
      (exists (ha0 ha1 ha2 ha3 p0 p1)
        (and (partOf' ha0 x y) (at' ha1 x p0) (opposite' ha2 p0 p1)
             (viewSide' ha3 p1)))))

(forall (e x y)
  (if (back-n5' e x y)
      (exists (ha0)
        (and (back-n3' e x y) (support' ha0 x y)))))

(forall (e y)
  (if (back-n7' e y)
      (exists (h ha0 ha1 ha2 ha3 x z)
        (and (partOf' ha0 y x) (shirt' ha1 x) (cover' ha2 y z)
             (back-n1' ha3 z h)))))

(forall (e y)
  (if (back-n8' e y)
      (exists (h ha0 ha1 ha2 ha3 x z)
        (and (partOf' ha0 y x) (seat' ha1 x) (support' ha2 y z)
             (back-n1' ha3 z h)))))

(forall (e x y)
  (if (back-v1-2-5-7-9' e x y)
      (support' e x y)))

(forall (e x)
  (if (back-v2' e x)
      (exists (d d0 ha0 ha1 ha2)
        (and (move' e x) (directionOf' ha0 d e) (face' ha1 x d0)
             (opposite' ha2 d0 d)))))

(forall (e x)
  (if (back-v8' e x)
      (exists (d1 d2 e1 e2 ha0 ha1 ha2)
        (and (change' e e1 e2) (move' e1 x) (directionOf' ha0 d1 e1)
             (move' e2 x) (directionOf' ha1 d2 e2) (opposite' ha2 d1 d2)))))

(forall (e x y)
  (if (back-v4' e x y)
      (exists (e0)
        (and (cause' e x e0) (back-v8' e0 y)))))

(forall (e x y)
  (if (back-v6' e x y)
      (back-n3' e x y)))

(forall (e x)
  (if (back-adj1-2' e x)
      (exists (y)
        (back-n3' e x y)))))

(forall (e x)
  (if (back-adj3' e x)
      (exists (e0 e1 ha0 ha1 ha2 y)
        (and (arg' ha0 x e0) (arg' ha1 y e1) (before' ha2 e0 e1)))))

(forall (e e0 e1)
  (if (back-adv3' e e1 e0)
      (exists (e3)
        (and (changeFrom' e3 e0) (changeTo' e1 e0) (before' e3 e1)))))

(forall (e e1 p0)
  (if (back-adv1' e e1 p0)
      (exists (e0 x)
        (and (back-adv3' e e1 e0) (at' e0 x p0)))))

(forall (e e0)
  (if (back-adv2' e e0)
      (exists (x)
        (back-v2' e0 x)))))

(forall (e e2)
  (if (back-adv5-6' e e2)
      (exists (e1 ha0 ha1 x y)
        (and (subst2' ha0 x y e2 y x e1) (before' ha1 e1 e2)))))

(forall (e e1 e2)
  (if (improve-s0' e e1 e2)
      (exists (ha0)
        (and (change' e e1 e2) (better' ha0 e2 e1)))))

(forall (e e1 e2 x)
  (if (improve-v2' e x e1 e2)
      (and (improve-s0' e e1 e2) (changeIn' e x)))

(forall (e x y)
  (if (improve-v1' e x y)
      (exists (e0)
        (and (cause' e x e0) (improve-v2' e0 y)))))

(forall (e e0)
  (if (improvement-n1' e0 e)
      (exists (e1 e2)
        (improve-s0' e e1 e2)))))

(forall (e e0)
  (if (improvement-n2' e e0)
      (exists (x y)
        (improve-v1' e0 x y)))))

(forall (e e2)
  (if (improvement-n3' e e2)
      (exists (e1)
        (improve-s0' e e1 e2)))))

(forall (e e0 x)
  (if (participate-v1' e x e0)
      (arg' e x e0)))

(forall (e e0 x)
  (if (participate-v2' e x e0)
      (exists (e1 ha0)
        (and (changeTo' e e1) (arg' ha0 x e1)))))

(forall (e e1 x)
  (if (participant-n1-n2' e x e1)
      (arg' e x e1)))

(forall (e p0 p1 x y)
  (if (carry-s0' e x y p0 p1)
      (exists (e1 e2 e3 ha0)
        (and (and' e e1 e2) (hold-v?' e1 x y) (move' e2 x p0 p1)
             (gen' ha0 e2 e3) (move' e3 y p0 p1)))))

(forall (e p1 x)
  (if (carry-s4' e x p1)
      (exists (ha0 ha1 p0 s)
        (and (at' e x p1) (at' ha0 x p0) (gts' ha1 p1 p0 s)))))

(forall (e p1 x)
  (if (carry-v9-19' e x p1)
      (exists (e0 ha0 ha1 p0 s)
        (and (changeTo' e e0) (at' e0 x p1) (at' ha0 x p0)
             (gts' ha1 p1 p0 s)))))

(forall (e p x y)
  (if (carry-v8' e x y p)
      (exists (e1)
        (and (cause' e x e1) (carry-v9-19' e y p)))))

(forall (e x y)
  (if (carry-v27' e x y)
      (exists (e1)
        (and (changeTo' e e1) (carry-s2' e1 x y)))))

(forall (e x y)
  (if (carry-s2-1' e x y)
      (in' e y x)))

(forall (e p0 p1 x y)
  (if (carry-s1' e x y p0 p1)
      (exists (e1 e2 e3)
        (and (cause' e x e1) (change' e1 e2 e3) (at' e2 y p0)
             (at' e3 y p1)))))

(forall (e x y)
  (if (carry-s1-1' e x y)
      (exists (p0 p1)
        (carry-s1' e x y p0 p1)))))

(forall (e e0 x y)
  (if (carry-s3' e x y e0)
      (exists (e1 e2 ha0)
        (and (cause' e x e1) (not' e1 e2) (changeFrom' e2 e0)
             (arg' ha0 y e0)))))

(forall (d1 e x)
  (if (swing-v2-3-5-7' e x d1)
      (exists (d d0 ha0 m)
        (and (changeIn' e d d0 d1) (directionOf' ha0 d m) (move' m x)))))

(forall (e x y)
  (if (swing-v1' e x y)
      (exists (d1 e0)
        (and (cause' e x e0) (swing-v2-3-5-7' e0 y d1)))))

(forall (e x y z)
  (if (swing-v7' e x y z)
      (exists (ha0)
        (and (hit-s2' e x y z) (armOf' ha0 y x)))))

(forall (e p0 x y)
  (if (swing-v4' e x y p0)
      (exists (e0 e1 e11)
        (and (cause' e x e0) (changeTo' e11 e1) (at' e1 y p0)))))

(forall (e x)
  (if (swing-v11-13' e x)
      (exists (e0 e1 e10 e11 h ha0 l s)
        (and (eventSequence' ha0 e e10 e11) (change' e10 e1 e0)
             (change' e11 e0 e1) (at' e0 h s) (at' e1 l s)))))

(forall (e x)
  (if (swing-v8-10' e x)
      (exists (e0 e1 e10 e11 h ha0 ha1 ha2 l s)
        (and (eventSequence' ha0 e e10 e11) (change' e10 e1 e0)
             (change' e11 e0 e1) (at' e0 h s) (at' e1 l s) (Hi' ha1 h s)
             (Lo' ha2 l s)))))

(forall (e x)
  (if (swing-v12' e x)
      (exists (m)
        (and (play-music' e x m) (swing-v8-10' e m)))))

(forall (e x)
  (if (swing-s0' e x)
      (exists (c e0 e1 e2 p1 p2)
        (and (free-A1' e x c e0) (change' e0 e1 e2) (at' e1 x p1)
             (at' e2 x p2)))))

(forall (e e0)
  (if (swing-n1' e e0)
      (exists (x)
        (swing-v11-13' e0 x)))))

(forall (e e0)
  (if (swing-n3' e0 e)
      (exists (x y z)
        (swing-v7' e x y z)))))

(forall (e e0)
  (if (swing-n4' e0 e)
      (exists (x)
        (swing-v11-13' e x)))))

(forall (e e0)
  (if (swing-n7-8' e0 e)
      (exists (x y)
        (swing-v1' e x y)))))

(forall (e e0 e2)
  (if (goal-n1' e e2 e0)
      (exists (e1 e3 ha0 ha1 st1 x)
        (and (intend' e x e0) (changeTo' e0 e2) (eventSequence' ha0 e0 e1 e3)
             (eventSequence' ha1 e1) (event' e3 st1 e2)))))

(forall (e g)
  (if (goal-n3' e g)
      (exists (e2 y)
        (and (goal-n1' e e2) (at' e2 y g)))))

(forall (e g)
  (if (goal-n2' e g)
      (exists (e2 x)
        (and (goal-n1' e e2) (at' e2 x g)))))

(forall (e e0)
  (if (goal' e e0)
      (exists (e10 e2 ha0)
        (and (goal-n1' e10 e2 e0) (Rexist' ha0 e0)))))

(forall (e x y)
  (if (absorb-s0' e x y)
      (exists (e1 e2 e3)
        (and (changeTo' e e1) (and' e1 e2 e3) (blendIn' e2 y x)
             (hold' e3 x y)))))

(forall (e x y)
  (if (absorb-v8' e y x)
      (absorb-s0' e x y)))

(forall (e x y z)
  (if (absorb-v5-7' e x y z)
      (exists (e0)
        (and (cause' e x e0) (absorb-s0' e0 z y)))))

(forall (e x)
  (if (break-v47' e x)
      (exists (e0 e1 e2 e4 ha0 ha1)
        (and (not' e e4) (change' e4 e1 e2) (eventSequence' e0 e1 e2)
             (eventSequence' ha0 e2) (agentOf' ha1 x e0)))))

(forall (e e0 x)
  (if (break-v1-10-48' e x e0)
      (exists (e1 e2 e3 e4 ha0)
        (and (eventSequence' e0 e1 e2) (cause' e x e3) (not' e3 e4)
             (change' e4 e1 e2) (eventSequence' ha0 e2)))))

(forall (e x y)
  (if (break-v48' e x y)
      (exists (c e0)
        (and (break-v1-10-48' e x e0) (flow' e0 c y)))))

(forall (e e0 x)
  (if (break-s1' e x e0)
      (exists (ha0 ha1 ha2 ha3 y z)
        (and (compositeEntity' ha0 x) (changeFrom' e e0) (rel' ha1 e0 y z)
             (partOf' ha2 y x) (partOf' ha3 z x)))))

(forall (e x)
  (if (break-s1-1' e x)
      (exists (e0 ha0 y z)
        (and (solid' ha0 x) (break-s1' e x e0) (connect?' e0 y z)))))

(forall (e x y)
  (if (break-v43-5' e x y)
      (exists (e0)
        (and (cause' e x e0) (break-s1-1' e y)))))

(forall (e x)
  (if (break-v44-54' e x)
      (exists (e0)
        (break-s1' e x e0)))))

(forall (e x y)
  (if (break-v57-24-45' e x y)
      (exists (e0)
        (and (cause' e x e0) (break-v44-54' e0 y)))))

(forall (e x)
  (if (break-v19' e x)
      (exists (e0 ha0)
        (and (break-s1' e x e0) (group' ha0 x)))))

(forall (e x y)
  (if (break-v39-40-41' e x y)
      (exists (e0)
        (and (cause' e x e0) (break-v19' e0 y)))))

(forall (e x)
  (if (break-v17' e x)
      (exists (e1 ha0)
        (and (system' ha0 x) (break-s1' e x) (changeFrom' e e1)
             (function' e1 x)))))

(forall (e x y)
  (if (break-v3-4' e x y)
      (exists (e0)
        (and (cause' e x e0) (break-v17' e0 y)))))

(forall (e x)
  (if (break-v36' e x)
      (exists (e1 e2)
        (and (break-s1' e x) (change' e e1 e2) (up' e1 x) (down' e2 x)))))

(forall (e x y)
  (if (break-v29-50' e x y)
      (exists (e0)
        (and (cause' e x e0) (break-v36' e y)))))

(forall (e x y)
  (if (break-v6-13-30-14' e x y)
      (exists (ha0)
        (and (barrier' ha0 y) (pass' e x y)))))

(forall (e x)
  (if (break-v15-35-46' e x)
      (exists (e0 e1 e3 e4 e5 p0 p1 y)
        (and (change' e e0 e1) (at' e0 x p0) (at' e1 x p1) (not' e3 e4)
             (perceive' e4 y e0) (perceive' e5 y e1)))))

(forall (e x y)
  (if (break-v7' e x y)
      (exists (e0 ha0)
        (and (changeFrom' e e0) (in' e0 x y) (sudden' ha0 e)))))

(forall (e x y)
  (if (break-v11' e x y)
      (exists (e0 ha0)
        (and (changeTo' e e0) (in' e0 x y) (sudden' ha0 e)))))

(forall (e e2 x)
  (if (break-v9' e x e2)
      (exists (ha0 ha1)
        (and (changeTo' e e2) (sudden' ha0 e) (agentOf' ha1 x e)))))

(forall (e x y)
  (if (break' e x y)
      (exists (e0)
        (and (changeFrom' e e0) (rel' e0 x y)))))

(forall (e e0 x)
  (if (break-v26' e x e0)
      (exists (ha0)
        (and (changeFrom' e e0) (agentOf' ha0 x e0)))))

(forall (e e0 x y)
  (if (break-v25' e x y e0)
      (exists (e1)
        (and (cause' e x e0) (break-v26' e0 y e1)))))

(forall (e x)
  (if (break-v16-27-28-53' e x)
      (exists (e0)
        (and (changeTo' e e0) (Rexist' e0 x)))))

(forall (e x)
  (if (break-v23' e x)
      (decrease' e x)))

(forall (e x y)
  (if (break-v21-59' e x y)
      (exists (e0)
        (and (cause' e x e0) (decrease' e0 y)))))

(forall (e x y)
  (if (break-v32-59' e x y)
      (exists (e0 ha0 p)
        (and (cause' e x e0) (decrease' e0 p) (positionOf' ha0 p y)))))

(forall (e x)
  (if (break-v52-56-58' e x)
      (exists (ha0)
        (and (decrease' e x) (sudden' ha0 e)))))

(forall (e x)
  (if (break-n1-13' e x)
      (exists (e0 e1)
        (break-v1-10-48' e1 x e0)))))

(forall (e e0)
  (if (break-n5' e e0)
      (exists (x)
        (break-v47' e0 x)))))

(forall (e t)
  (if (break-n7' e t)
      (exists (e0 e1 ha0 x)
        (and (break-v1-10-48' e1 x e0) (durationOf' ha0 t e)))))

(forall (e e0)
  (if (break-n6' e0 e)
      (exists (x y)
        (break-v43-5' e x y)))))

(forall (e e0)
  (if (break-n8-9' e0 e)
      (exists (x)
        (break-v44-54' e x)))))

(forall (e e0)
  (if (break-n16' e0 e)
      (exists (x y)
        (break-v7' e x y)))))

(forall (e e0 x)
  (if (withdraw-s0' e x e0)
      (exists (ha0)
        (and (changeFrom' e e0) (arg' ha0 x e0)))))

(forall (e x y)
  (if (withdraw-v10' e x y)
      (exists (e0 ha0)
        (and (withdraw-s0' e x e0) (interestedIn' ha0 e0 x y)))))

(forall (e x)
  (if (withdraw-v8' e x)
      (exists (e0 e1 ha0)
        (and (withdraw-s0' e x e0) (responsible' ha0 e0 x e1)))))

(forall (e x)
  (if (withdraw-v7' e x)
      (exists (e0 ha0 ha1)
        (and (withdraw-s0' e x e0) (gathering' ha0 e0) (temporary' ha1 e)))))

(forall (e e0 x)
  (if (withdraw-v11' e x e0)
      (withdraw-s1' e x e0)))

(forall (e e0 x y)
  (if (withdraw-s1' e x y e0)
      (and (changeFrom' e e0) (rel' e0 x y)))

(forall (e e0 x y z)
  (if (withdraw-s2' e x y z e0)
      (exists (e1)
        (and (cause' e x e1) (withdraw-s1' e1 y z e0)))))

(forall (e x y)
  (if (withdraw-v4' e x y)
      (exists (e0 e1 ha0 z)
        (and (withdraw-s2' e x y z e0) (have' e0 z y) (sell' e1 x y z)
             (before' ha0 e1 e)))))

(forall (e w x)
  (if (withdraw-v5' e x w)
      (exists (e0 e1 e2 e3 ha0 z)
        (and (cause' e x e2) (withdraw-s1' e2 w z e0) (believe' e0 z e1)
             (believe' e1 x w) (say' e3 x w) (before' ha0 e3 e)))))

(forall (e ha0 y)
  (if (output-n1-2-3-5' ha0 e y)
      (exists (x)
        (output-v1' e x y)))))

(forall (e t x y)
  (if (output-n5' e y x t)
      (exists (ha0)
        (and (output-v1' e x y) (timeSpanOf' ha0 t e)))))

(forall (a e)
  (if (output-n4' e a)
      (exists (ha0 t x y)
        (and (output-n5' e y x t) (amountOf' ha0 a y)))))

(forall (e x y)
  (if (output-v1' e x y)
      (exists (e0 e1 e2)
        (and (cause' e x e0) (changeTo' e0 e1) (Rexist' e1 e2)))))

(forall (e x y z)
  (if (consume-s0' e x y z)
      (exists (e0 e1 ha0)
        (and (cause' e x e0) (changeFrom' e0 e1) (Rexist' e1 z)
             (partOf' ha0 z y)))))

(forall (e x y z)
  (if (consume-v5-6' e x y z)
      (exists (ha0)
        (and (consume-s0' e x y) (need' ha0 x z)))))

(forall (e x y)
  (if (consume-v3' e x y)
      (exists (e3 ha0 z)
        (and (consume-s0' e x y z) (not' ha0 e3) (need' e3 x z)))))

(forall (e x y)
  (if (consume-v4' e x y)
      (destroy-s1' e x y)))

(forall (e e0 x)
  (if (recover-s0' e x e0)
      (exists (e1 ha0 ha1 ha2)
        (and (changeTo' e e0) (arg' ha0 x e0) (changeFrom' e1 e0)
             (before' ha1 e1 e) (good' ha2 e0)))))

(forall (e x y)
  (if (recover-s0-1' e x y)
      (exists (e0)
        (and (cause' e x e0) (recover-s0' e y e0) (rel' e0 x y)))))

(forall (e e10)
  (if (recovery-n1' e e10)
      (exists (e0 x)
        (recover-s0' e10 x e0)))))

(forall (e e0)
  (if (recovery-n3' e e0)
      (exists (x y)
        (recover-s0-1' e0 x y)))))

(forall (e e0 x)
  (if (shift-n1' e e0 x)
      (exists (p1)
        (shift-v2' e0 x p1)))))

(forall (e e0)
  (if (shift-n2' e e0)
      (exists (x)
        (shift-v6' e0 x)))))

(forall (e e0 t x)
  (if (shift-n3' e t x e0)
      (exists (e1 e2 ha0 y)
        (and (shift-v1' e0 x y e1 e2) (durationOf' ha0 t e1)))))

(forall (e x)
  (if (shift-n7' e x)
      (exists (e0 ha0 t)
        (and (shift-n3' e t x e0) (crew' ha0 x)))))

(forall (e0 e1 e2 p1 p2 x)
  (if (shift-v13' e0 x p1 p2 e1 e2)
      (and (change' e0 e1 e2) (at' e1 x p1) (at' e2 x p2)))

(forall (e0 p1 x)
  (if (shift-v2' e0 x p1)
      (exists (e1 e2 ha0 ha1 p2)
        (and (shift-v13' e0 x p1 p2 e1 e2) (location' ha0 p1)
             (location' ha1 p2)))))

(forall (e0 x)
  (if (shift-v6' e0 x)
      (exists (e1 e2 ha0 ha1 p1 p2)
        (and (shift-v13' e0 x p1 p2 e1 e2) (quality' ha0 p1)
             (quality' ha1 p2)))))

(forall (e0 e1 e2 x y)
  (if (shift-v1' e0 x y e1 e2)
      (exists (p)
        (and (change' e0 e1 e2) (at' e1 x p) (at' e2 y p)))))

(forall (e e0 p0 p1 x y)
  (if (shift-s1' e x y p0 p1 e0)
      (exists (e3 e4 p2)
        (and (cause' e x e0) (shift-v13' e0 y p1 p2 e3 e4)))))

(forall (e p0 p1 x y)
  (if (shift-v3' e x y p0 p1)
      (exists (e0)
        (and (shift-s1' e x y p0 p1 e0) (shift-v2' e0 x p1)))))

(forall (e p0 p1 x y)
  (if (shift-v7' e x y p0 p1)
      (exists (e0)
        (and (shift-s1' e x y p0 p1 e0) (dateOf' p0 y) (dateOf' p1 y)))))

(forall (e x y)
  (if (spend-s0' e x y)
      (exists (e0 e1 ha0)
        (and (cause' e x e0) (changeFrom' e0 e1) (have' e1 x y)
             (valuable' ha0 y)))))

(forall (e e0 x)
  (if (player-n5' e x e0)
      (causallyInvolved' e x e0)))

(forall (e e0)
  (if (play-n5' e e0)
      (exists (e1 ha0 y)
        (and (possible' e0 e1) (objectOf' ha0 y e1)))))

(forall (e e0 r x)
  (if (play-v2' e x r e0)
      (causallyInvolved' e x e0)))

(forall (e e0 x)
  (if (play-v17' e x e0)
      (agentOf' e x e0)))

(forall (e e0 x)
  (if (play-v27' e x e0)
      (cause' e x e0)))

(forall (e x y)
  (if (play-v19' e x y)
      (exists (ha0 ha1)
        (and (eventSequence' ha0 e) (agentOf' ha1 x e) (objectOf' y e)))))

(forall (e x y)
  (if (play-v32-15-33' e x y)
      (exists (e0 ha0)
        (and (cause' e x e0) (objectOf' ha0 y e0)))))

(forall (e p0 p1)
  (if (exceed-s0' e p1 p0)
      (exists (ha0 s)
        (gts' ha0 p1 p0 s)))))

(forall (e p0 x)
  (if (exceed-s0' e x p0)
      (exists (ha0 q)
        (and (qualityOf' ha0 q x) (exceed-s0' e q p0)))))

(forall (e x y)
  (if (exceed-v3' e x y)
      (exists (ha0 ha1 q0 q1)
        (and (qualityOf' ha0 q1 x) (qualityOf' ha1 q0 y)
             (exceed-s0' e q1 q0)))))

(forall (e e0)
  (if (become-v3' e e0)
      (changTo' e e0)))

(forall (e e0 x)
  (if (become-v1' e x e0)
      (and (changeTo' e e0) (changeIn' e x)))

(forall (e x y)
  (if (become-v2' e x y)
      (exists (e0 e1 z)
        (and (changeIn' e z) (change' e e0 e1) (be' e0 z x) (be' e1 z y)))))

(forall (e x y z)
  (if (transform-v3' e x z y)
      (exists (e0 e1)
        (and (change' e e0 e1) (form' e0 z x) (form' e1 y x)))))

(forall (e f0 f1 x y)
  (if (transform-v2-4-5-6' e x y f0 f1)
      (exists (e1)
        (and (cause' e x e1) (transform-v3' e1 y f0 f1)))))

(forall (e e0)
  (if (fall-n2' e e0)
      (exists (x)
        (fall-v23-24' e0 x)))))

(forall (e e0)
  (if (fall-n3-5-6' e e0)
      (exists (p2 x)
        (fall-s0-1' e0 x p2)))))

(forall (e e0)
  (if (fall-n7-11' e e0)
      (exists (x y z)
        (fall-v1-5' e0 x y z)))))

(forall (e e0)
  (if (fall-n12' e e0)
      (exists (x)
        (fall-v2' e0 x)))))

(forall (e p1 p2 x)
  (if (fall-s0' e x p2 p1)
      (exists (e1 e2 ha0 ha1 s)
        (and (change' e e2 e1) (at' e2 x p2 s) (at' e2 x p1 s)
             (lts' ha0 p1 p2) (vertical' ha1 s)))))

(forall (e p2 x)
  (if (fall-s0-1' e x p2)
      (exists (ha0 p1 s)
        (and (fall-s0' e x p2 p1) (opposite' ha0 p2 p1 s)))))

(forall (e x y z)
  (if (fall-v1-5' e x y z)
      (exists (ha0 ha1 p1 p2)
        (and (fall-s0' e x p2 p1) (at' ha0 p1 y) (at' ha1 p2 z)))))

(forall (e p1 p2 x)
  (if (fall-v23-24' e x p2 p1)
      (exists (ha0 y)
        (and (fall-s0' e y p2 p1) (partOf' ha0 y x)))))

(forall (e e0 x)
  (if (fall-s1' e x e0)
      (exists (ha0)
        (and (changeTo' e e0) (arg' ha0 x e0)))))

(forall (e x y)
  (if (fall-s1-0' e y x)
      (exists (e1)
        (and (changeTo' e e1) (have' e1 x y)))))

(forall (e e0 p)
  (if (fall-s2' e e0 p)
      (at' e e0 p)))

(forall (e x y)
  (if (fall-v4' e x y)
      (memberOf' e x y)))

(forall (e e0)
  (if (fall-v32' e e0)
      (changeTo' e e0)))

(forall (e x y)
  (if (fall-v28-29' e x y)
      (exists (e0)
        (and (changeFrom' e e0) (in' e0 x y)))))

(forall (e x y)
  (if (fall-v28' e x y)
      (say' e x y)))

(forall (e p1 x)
  (if (fall-v22' e x p1)
      (exists (ha0 s0)
        (and (fall' e s0 p1) (partOf' ha0 s0 x)))))

(forall (e e0 x y)
  (if (tap-n2-8' e e0 x y)
      (tap-v7' e0 x y)))

(forall (e s)
  (if (tap-n1' e s)
      (exists (e0 ha0 x y)
        (and (tap-v3-7' e0 x y) (soundOf' ha0 s e0)))))

(forall (e x y z)
  (if (tap-v7' e x y z)
      (exists (e1 e2 e3 ha0)
        (and (cause' e x e1) (changeTo' e1 e2) (at' e2 y z) (gen' ha0 e2 e3)
             (impact' e3 y z)))))

(forall (e x z)
  (if (tap-v3' e x z)
      (exists (ha0 y)
        (and (tap-v7' e x y z) (hand' ha0 y x)))))

(forall (e x y)
  (if (tap-s0' e x y)
      (exists (e1 e2 ha0 z)
        (and (cause' e x e1) (changeFrom' e1 e2) (in' e2 z y)
             (liquid' ha0 z)))))

(forall (e x y)
  (if (tap-v6' e x y)
      (exists (e1 e2 e3 ha0 ha1 ha2 t z)
        (and (cause' ha0 e x e1) (possible' e1 e2) (tap-s0' e2 z y)
             (have' e3 y t) (tap-n3-6' ha1 t) (gen' ha2 e3 e1)))))

(forall (e x y)
  (if (leave-s0' e x y)
      (exists (e1)
        (and (not' e e1) (rel' e1 x y)))))

(forall (e x y)
  (if (leave-s1' e x y)
      (exists (e1)
        (and (changeFrom' e e1) (rel' e1 x y)))))

(forall (e p x)
  (if (leave-v5' e x p)
      (exists (e1)
        (and (changeFrom' e e1) (at' e1 x p)))))

(forall (e x)
  (if (leave-v1' e x)
      (exists (p)
        (leave-v5' e x p)))))

(forall (e p x y)
  (if (leave-s2' e x y p)
      (exists (e3 ha0)
        (and (leave-v5' e x p) (rel/have' e3 x y) (at' ha0 y p)))))

(forall (e p x y)
  (if (leave-v14' e x y p)
      (exists (ha0)
        (and (leave-s2' e x y p) (unIntentional' ha0 e)))))

(forall (e p x y)
  (if (leave-v12' e x y p)
      (exists (ha0)
        (and (leave-s2' e x y p) (world' ha0 p)))))

(forall (e x y z)
  (if (leave-v10' e x y z)
      (exists (e1 ha0 ha1 ha2 p)
        (and (leave-s2' e x y p) (world' ha0 p) (cause' ha1 e e1)
             (have' e1 z y) (at' ha2 z p)))))

(forall (e p x y)
  (if (leave-v7' e x y p)
      (exists (e1 e2 e3)
        (and (and' e e1 e2) (leave-v5' e1 x p) (cause' e2 x e3)
             (at' e3 y p)))))

(forall (e x y)
  (if (leave-v4' e x y)
      (exists (e1 e2)
        (and (not' e e1) (changeTo' e1 e2) (rel' e2 x y)))))

(forall (e x y z)
  (if (leave-v9' e x y z)
      (exists (e1 e2 e3 ha0 ha1 ha2 ha3 ha4)
        (and (and' e e1 e2) (not' e1 e3) (arg' ha0 y e3) (arg' ha1 x e3)
             (arg' ha2 y e2) (arg' ha3 z e2) (subst' ha4 x e3 z e2)))))

(forall (e x y)
  (if (leave-s3' e x y)
      (exists (e1 s1 s2)
        (and (cause' e x e1) (setdiff' e1 y s1 s2)))))

(forall (e x y)
  (if (leave-v11' e x y)
      (exists (e1 e2 ha0 s1 z)
        (and (cause' e x e1) (changeFrom' e1 e2) (subset' e2 z s1)
             (subset' ha0 y s1)))))

(forall (e x y)
  (if (leave-v6' e x y)
      (exists (e0 e1 e2 s1)
        (and (not' e e0) (cause' e0 x e1) (changeFrom' e1 e2)
             (subset' e2 y s1)))))

(forall (e x y)
  (if (leave-v3' e x y e)
      (exists (ha0)
        (and (cause' e x e) (arg' ha0 y e)))))

(forall (e x y z)
  (if (leave-v13' e x y z)
      (exists (e1 e2 ha0)
        (and (cause' e x e1) (changeTo' e1 e2) (have' e2 z y)
             (knowledge' ha0 y)))))

(forall (e x y)
  (if (penetrate-s0' e x y)
      (exists (e1 ha0 ha1)
        (and (changeTo' e e1) (in' e1 x y) (dense' ha0 y)
             (resist' ha1 y e1)))))

(forall (e x y)
  (if (penetrate-v2-3' e x y)
      (exists (ha0 z)
        (and (penetrate-s0' e x y) (mind' ha0 y z)))))

(forall (e g x)
  (if (penetrate-v4' e x g)
      (exists (e1 e2 ha0)
        (and (penetrate-s0' e x g) (group' ha0 g) (not' e1 e2)
             (awareOf' e2 x e)))))

(forall (e x)
  (if (change-s0' e x)
      (changeIn' e x)))

(forall (e x y)
  (if (change-v1' e x y)
      (exists (e0)
        (and (cause' e x e0) (changeIn' e0 x)))))

(forall (e x y y0 y1)
  (if (change-s1' e x y y0 y1)
      (exists (e0 e1 ha0 ha1)
        (and (change' e e0 e1) (rel' e0 x y0) (rel' e1 x y1)
             (typeOf' ha0 y y0) (typeOf' ha1 y y1)))))

(forall (e x y)
  (if (change-v10' e x y)
      (exists (e0 ha0 z)
        (and (cause' e x e0) (change-s1' e0 y z) (coveringOf' ha0 z y)))))

(forall (e x y z)
  (if (change-v7' e x y z)
      (exists (e0 e1 e2 e3 e4 e5 ha0 ha1 y0 y1)
        (and (change' e e0 e1) (and' e0 e2 e3) (and' e1 e4 e5) (at' e2 y0 x)
             (at' e3 y1 z) (at' e4 y0 z) (at' e5 y1 x) (typeOf' ha0 y y0)
             (typeOf' ha1 y y1)))))

(forall (e e0)
  (if (change-n1' e e0)
      (exists (e1 e2)
        (change' e0 e1 e2)))))

(forall (d e)
  (if (change-n2' e d)
      (exists (e0 e1 e2 ha0)
        (and (change' e0 e1 e2) (difference' ha0 d e2 e1)))))

(forall (e e0)
  (if (change-n3' e e0)
      (exists (e1 e2 x)
        (and (cause' e x e0) (change' e0 e1 e2)))))

(forall (c1 e)
  (if (change-n7' e c1)
      (exists (c c0 ha0 x)
        (and (change-s1' e x c c0 c1) (cloth' ha0 c)))))

(forall (e e0)
  (if (change-n10' e e0)
      (exists (e1 ha0 ha1 x)
        (and (change' e e0 e1) (arg' ha0 x e0) (arg' ha1 x e1)))))

(forall (e e1)
  (if (?change-n6' e e1)
      (exists (e0 ha0)
        (change' ha0 e e0 e1)))))

(forall (e e0 x)
  (if (begin-s0' e x e0)
      (exists (e1 e2 ha0 ha1)
        (and (changeTo' e e1) (arg' ha0 x e0) (eventSequence' ha1 e0 e1 e2)))))

(forall (e x y)
  (if (begin-s1' e x y)
      (exists (e0 ha0)
        (and (begin-s0' e x e0) (arg' ha0 y e0)))))

(forall (e x)
  (if (begin-v4' e x)
      (exists (e0)
        (and (begin-s0' e x e0) (speak' e0 x)))))

(forall (e e0 x)
  (if (begin-v3' e x e0)
      (exists (e1)
        (and (cause' e x e1) (changeTo' e1 e0)))))

(forall (b e s)
  (if (begin-s2' e s b)
      (bottom' e b s)))

(forall (e e0 t0)
  (if (begin-v6' e e0 t0)
      (exists (ha0 t)
        (and (during' ha0 e0 t) (bottom' e t0 t)))))

(forall (b e s)
  (if (beginning-n1-2-3-4' e b s)
      (bottom' e b s)))

(forall (e e0 e1)
  (if (beginning-n1' e0 e1 e)
      (exists (e2 ha0)
        (and (eventSequence' ha0 e e1 e2) (??first' e e1 e)))))

(forall (e e0 t0)
  (if (beginning-n2' e t0 e0)
      (exists (ha0 t)
        (and (during' ha0 e0 t) (bottom' e t0 t)))))

(forall (b e x)
  (if (beginning-n3' e b x)
      (first' e b x)))

(forall (e l y)
  (if (beginning-n4' e l y)
      (exists (b e0 ha0 ha1 s)
        (and (hasScale??' ha0 y s) (beginning-n1-2-3-4' e0 b s) (at' e b l)
             (location' ha1 l)))))

(forall (e e0)
  (if (beginning-n5' e e0)
      (exists (e1 x)
        (begin-v3' e0 x e1)))))

(forall (b e0 x)
  (if (beginning-adj1' e0 b x)
      (first' e0 b x)))

(forall (e e0)
  (if (transfer-n1-2' e0 e)
      (exists (p0 p1 x y)
        (transfer-s0' e x y p0 p1)))))

(forall (e y)
  (if (transfer-n2' e y)
      (exists (e0 p0 p1 x)
        (transfer-v1' e0 x y p0 p1)))))

(forall (e p0 p1 x y)
  (if (transfer-s0' e x y p0 p1)
      (exists (e0 e1 e2 p2)
        (and (cause' e x e0) (change' e0 e1 e2) (rel' e1 y p0)
             (rel' e2 y p2)))))

(forall (e x)
  (if (transfer-v6' e x)
      (exists (e1 e2 p0 p2)
        (and (change' e e1 e2) (rel' e1 x p0) (rel' e2 x p2)))))

(forall (e0 w z)
  (if (divide-v4' e0 w z)
      (exists (e e1)
        (and (changeFrom' e e1) (connect' e1 w z)))))

(forall (e w x z)
  (if (divide-v6' e x w z)
      (exists (e0 e1)
        (and (cause' e x e0) (changeFrom' e0 e1) (connect' e1 w z)))))

(forall (e w x y z)
  (if (divide-v1-5' e x y w z)
      (exists (e0 e1 ha0 ha1)
        (and (cause' e x e0) (changeFrom' e0 e1) (connect' e1 w z)
             (componentOf' ha0 w y) (componentOf' ha1 w y)))))

(forall (e e0)
  (if (advance-n0' e0 e)
      (exists (p0 p1 x)
        (advance-s0' e x p0 p1)))))

(forall (e0 z)
  (if (advance-n5' e0 z)
      (exists (e x y)
        (advance-v10' e x y z)))))

(forall (e p0 p1 x)
  (if (advance-s0' e x p0 p1)
      (exists (e1 e2 ha0 p2 s)
        (and (change' e e1 e2) (at' e1 x p1 s) (at' e2 x p2 s)
             (gts' ha0 p1 p2)))))

(forall (d e x)
  (if (advance-v12' e x d)
      (exists (ha0 p0 p1 p2)
        (and (advance-s0' e x p0 p1) (difference' ha0 d p1 p2)))))

(forall (e x y)
  (if (advance-s1' e x y)
      (exists (e1)
        (and (cause' e x e1) (advance-s0' e1 y)))))

(forall (e x y z)
  (if (advance-v10' e x y z)
      (exists (ha0)
        (and (give' e x z y) (advance-adj1' ha0 e)))))

(forall (e e0?x? x)
  (if (advance-adj1' e x e0?x?)
      (exists (e0 e2 ha0 ha1 ha2 ha3 t0 t1)
        (and (atTime' ha0 e0 t0) (supposed' ha1 e2) (atTime' e2 e0 t1)
             (before' ha2 t0 t1) (?arg' ha3 x e0)))))

(forall (e x)
  (if (advance-adj2' e x)
      (exists (e0 e1 ha0 ha1 ha2 ha3 ha4 ha5 t0 t1 y)
        (and (atTime' ha0 e0 t0) (arg' ha1 x e0) (subst' ha2 x e0 y e1)
             (atTime' ha3 e1 t1) (arg' ha4 y e1) (before' ha5 t0 t1)))))

(forall (e x)
  (if (expand-s0' e x)
      (exists (ha0 s z)
        (and (increase' e z s) (sizeOf' ha0 z x)))))

(forall (e x y)
  (if (expand-s0' e x y)
      (exists (e1)
        (and (cause' e x e1) (expand-s0' e1 y)))))

(forall (e p1 r x)
  (if (expand-v7' e x r p1)
      (exists (b e1 ha0 p0)
        (and (cause' e x e1) (increase' e1 b p0 p1) (boundaryOf' ha0 b r)))))

(forall (e x y)
  (if (expand-v6' e x y)
      (exists (e1 ha0 s z)
        (and (cause' e x e1) (increase' e1 z s) (detailOf' ha0 z y)))))

(forall (e r)
  (if (route-n1-2' e r)
      (exists (e0 ha0 p0 p1 x)
        (and (move' e0 x p0 p1) (beforeInSeq' ha0 p0 p1 r)))))

(forall (e x y)
  (if (route-v1-2-3' e x y)
      (exists (e0 p0 p1 r)
        (and (cause' e x e0) (travel' e0 x r p0 p1)))))

(forall (e e0)
  (if (flight-n2' e e0)
      (exists (x)
        (fly' e0 x)))))

(forall (e x)
  (if (flight-n8' e x)
      (exists (ha0 ha1)
        (and (fly' e x) (group' ha0 x) (bird' ha1 x)))))

(forall (e p)
  (if (flight-n7' e p)
      (exists (e0 x)
        (and (path' e p e0) (fly' e0 x)))))

(forall (e e0 p x)
  (if (flight-n4' e0 e x p)
      (exists (e1)
        (and (changeFrom' e e1) (at' e1 x p)))))

(forall (e e0 x)
  (if (flight-n6' e0 e x)
      (exists (ha0 ha1 p p0 s)
        (and (changeTo' e e0) (at' e0 x p s) (gts' ha0 p p0 s)
             (norm' ha1 p0)))))

(forall (e x)
  (if (flight-v2' e x)
      (exists (ha0 ha1)
        (and (fly' e x) (group' ha0 x) (bird' ha1 x)))))

(forall (e e0)
  (if (strike-n2' e0 e)
      (exists (x y)
        (strike-v4' e x y)))))

(forall (e x y)
  (if (strike-n3' e x y)
      (exists (e2 ha0)
        (and (strike-s2' e x y e2) (low' ha0 e2)))))

(forall (e e0)
  (if (strike-n6' e e0)
      (exists (ha0 x y)
        (and (strike-s1' e0 x y) (goal' ha0 y x)))))

(forall (e x y)
  (if (strike-s0' e x y)
      (exists (e1 e2)
        (and (changeTo' e e1) (impact-v2' e1 x y e2)))))

(forall (e x y)
  (if (strike-v6-15' e x y)
      (exists (ha0)
        (and (strike-s0' e x y) (sudden' ha0 e)))))

(forall (e x y)
  (if (strike-s1' e x y)
      (exists (e1)
        (and (changeTo' e e1) (at' e1 x y)))))

(forall (e e2 x y)
  (if (strike-s2' e x y e2)
      (exists (e3 ha0)
        (and (strike-s1' e x y) (sudden' ha0 e) (impact-v2' e2 x y e3)))))

(forall (e x y)
  (if (strike-v3' e x y)
      (exists (e3 e4 e5)
        (and (strike-s2' e x y e3) (impact-v2' e4 y x e5)))))

(forall (e x y z)
  (if (strike-v16' e x y z)
      (exists (e1)
        (and (cause' e x e1) (strike-v3' e1 y z)))))

(forall (e x y z)
  (if (strike-v1-10-19' e x y z)
      (exists (e1 e3)
        (and (cause' e x e1) (strike-s2' e1 y z e3)))))

(forall (e x y)
  (if (strike-v12' e x y)
      (exists (e1 ha0)
        (and (changeTo' e e1) (rel' e1 x y) (unexpected' ha0 e)))))

(forall (e x y)
  (if (origin-n1' e x y)
      (exists (b ha0 s)
        (and (hasScale??' ha0 y s) (bottom' e b s) (at' b x)))))

(forall (e o x)
  (if (origin-n2-6' e o x)
      (exists (e1 ha0 ha1 s)
        (and (before' ha0 o x s) (cause' ha1 o e1) (Rexist' e1 x)))))

(forall (e ha0 o s)
  (if (origin-n4' ha0 e o s)
      (bottom' e o s)))

(forall (e e1 x)
  (if (open-adj0' e x e1)
      (exists (e0 y)
        (and (possible' e e0) (changeTo' e0 e1) (rel' e1 y x)))))

(forall (e x)
  (if (open-adj3-10-8' e x)
      (exists (e1 y)
        (and (open-adj0' e x e1) (in' e1 y x)))))

(forall (e x)
  (if (open-adj5-13' e x)
      (exists (e0 e1 e2 e3 y)
        (and (possible' e e0) (and' e0 e1 e2) (changeTo' e1 e3)
             (changeFrom' e2 e3) (in' e3 y x)))))

(forall (e x)
  (if (open-adj4-7-16-17' e x)
      (exists (e0 e1 ha0 y)
        (and (possible' e e0) (changeTo' e0 e1) (rel' e1 y x)
             (public' ha0 y)))))

(forall (e x)
  (if (open-adj2-9' e x)
      (exists (e0 y)
        (and (possible' e e0) (pass-s?' e0 y x)))))

(forall (e x)
  (if (open-adj1' e x)
      (exists (a b e0 e1 e2 e3 e4 e5 e6 ha0 s1 s2)
        (and (door' ha0 x s1 s2) (at' e3 a s1) (at' e5 b s2) (possible' e e0)
             (and' e0 e1 e2) (change' e1 e3 e4) (change' e2 e5 e6)
             (at' e3 b s1) (at' e5 a s2)))))

(forall (e p)
  (if (open-adj2-9' e p)
      (exists (ha0 ha1 x)
        (and (open-adj2-9' e x) (path' ha0 p) (at' ha1 x p)))))

(forall (e x)
  (if (open-adj2-9' e x)
      (exists (ha0)
        (and (open-adj2-9' e x) (texture' ha0 x)))))

(forall (e y)
  (if (open-v3' e y)
      (exists (e1)
        (and (changeTo' e e1) (open-adj1' e1 y)))))

(forall (e x y)
  (if (open-v1' e x y)
      (exists (e0 e1)
        (and (cause' e x e0) (changeTo' e0 e1) (open-adj1' e1 y)))))

(forall (e x y)
  (if (open-v2' e x y)
      (start-v5-6' e x y)))

(forall (e e1 x y)
  (if (open-v4' e x y e1)
      (exists (e2 ha0 ha1)
        (and (eventSequence' ha0 y e1 e2) (arg' ha1 x e1)))))

(forall (e x y)
  (if (open-v8' e x y)
      (exists (ha0)
        (connect-s?' ha0 e x y)))))

(forall (e x y)
  (if (open-v8' e x y)
      (exists (a b e0 e1 e2 e3 e4 e5 e6 s1 s2)
        (and (at' e3 a s1) (at' e5 b s2) (possible' e e0) (and' e0 e1 e2)
             (change' e1 e3 e4) (change' e2 e5 e6) (at' e3 b s1)
             (at' e5 a s2)))))

(forall (e s1 x)
  (if (open-v10' e x s1)
      (exists (ha0 s2)
        (door' ha0 x s1 s2)))))

(forall (e x y)
  (if (open-v11' e x y)
      (exists (e0 e1)
        (and (cause' e x e0) (changeTo' e0 e1) (open-adj5-13' e y)))))

(forall (e x)
  (if (open-v7' e x)
      (exists (e1 e2 y)
        (and (changeTo' e e1) (open-adj0' e1 x e2) (have-s?' e2 y x)))))

(forall (e x y)
  (if (open-v6' e x y)
      (exists (e0)
        (and (cause' e x e0) (open-v7' e0 y)))))

(forall (e x y)
  (if (innovate-v1' e x y)
      (exists (e0 e1 ha0)
        (and (cause' e x e0) (changeTo' e0 e1) (Rexist' e1 y)
             (new' ha0 y)))))

(forall (e e0)
  (if (innovation-n1-2-3' e e0)
      (exists (x y)
        (innovate-v1' e0 x y)))))

(forall (e e0 x)
  (if (start-v1' e x e0)
      (exists (ha0 ha1)
        (and (changeTo' e e0) (arg' ha0 x e0) (eventuality' ha1 e0)))))

(forall (e x y)
  (if (start-v13' e x y)
      (exists (e0 ha0)
        (and (start-v1' e x e0) (arg' ha0 y e0)))))

(forall (e x y)
  (if (start-v3' e x y)
      (exists (e0)
        (and (start-v1' e x e0) (travel' e0 x y)))))

(forall (e x)
  (if (start-v9' e x)
      (exists (e0)
        (start-v1' e x e0)))))

(forall (e e0 x)
  (if (start-v2' e x e0)
      (exists (e1)
        (and (cause' e x e1) (changeTo' e1 e0)))))

(forall (e x y)
  (if (start-v5-6' e x y)
      (exists (e0)
        (and (start-v2' e x e0) (Rexist' e0 y)))))

(forall (e x y)
  (if (start-v8' e x y)
      (exists (e0 e1)
        (and (cause' e x e0) (changeTo' e0 e1) (active' e1 y)))))

(forall (e0 x y)
  (if (start-v4' e0 x y)
      (start-n1-2' e0 y x)))

(forall (e x y)
  (if (start-v12' e x y)
      (first' e y x)))

(forall (b e0 s)
  (if (start-n1-2' e0 b s)
      (bottom' e0 b s)))

(forall (e e0 e1)
  (if (start-n1' e0 e1 e)
      (exists (e2 ha0)
        (and (eventSequence' ha0 e e1 e2) (??first' e e1 e)))))

(forall (e e0 t0)
  (if (start-n2' e t0 e0)
      (exists (ha0 t)
        (and (during' ha0 e0 t) (bottom' e0 t0 t)))))

(forall (e x)
  (if (start-n3' e x)
      (start-v11' e x)))

(forall (e e0)
  (if (start-n4' e e0)
      (exists (x)
        (start-v7' e0 x)))))

(forall (e e0)
  (if (start-n5' e e0)
      (exists (e1 x)
        (start-v2' e0 x e1)))))

(forall (e x)
  (if (start-n7' e x)
      (exists (e0 e1 ha0 ha1 y)
        (and (signal' ha0 x) (enable' ha1 x e0) (start-v1' e0 y e1)))))

(forall (e e0 x)
  (if (jump-n1' e0 e x)
      (exists (p1 p2 p3)
        (jump-v4-7' e x p1 p2 p3)))))

(forall (e e0 p1 p2 p3 x)
  (if (jump-n2' e0 e x p1 p2 p3)
      (jump-v13-14-15' e x p1 p2 p3)))

(forall (e e0 x)
  (if (jump-n4' e0 e x)
      (jump-v2' e x)))

(forall (e e0 x)
  (if (jump-n5' e0 e x)
      (jump-v8-10' e x)))

(forall (e e0 p1 p2 x y)
  (if (jump-n6' e0 e x p1 p2 y)
      (jump-v1' e x p1 p2 y)))

(forall (e p1 p2 x)
  (if (jump-s0' e x p1 p2)
      (exists (e1 e2 ha0)
        (and (change' e e1 e2) (at' e1 x p1) (at' e2 x p2) (sudden' ha0 e)))))

(forall (e x)
  (if (jump-v2' e x)
      (exists (ha0 p1 p2 y)
        (and (jump-s0' e y p1 p2) (partOf' ha0 y x)))))

(forall (e p1 p2 x)
  (if (jump-s1' e x p1 p2)
      (exists (ha0)
        (and (jump-s0' e x p1 p2) (vertical' ha0 e)))))

(forall (e p1 p2 x y)
  (if (jump-v1' e x p1 p2 y)
      (exists (e3 ha0 ha1 ha2 ha3 p3 s)
        (and (jump-s1' e y p1 p2) (not' ha0 e3) (at' e3 x y) (at' ha1 y p3)
             (lts' ha2 p1 p3 s) (lts' ha3 p3 p2 s)))))

(forall (e p1 p2 x y z)
  (if (jump-v11' e x y p1 p2 z)
      (exists (e1)
        (and (cause' e x e1) (jump-v1' e1 x p1 p2 y)))))

(forall (e x)
  (if (jump-v8-10' e x)
      (exists (ha0 p1 p2)
        (and (jump-s1' e x p1 p2) (empty' ha0 p2)))))

(forall (e p1 p2 p3 x)
  (if (jump-v4-7' e x p1 p2 p3)
      (exists (ha0 ha1 s)
        (and (jump-s0' e x p1 p2) (distance' ha0 p3 p1 p2 s) (high' ha1 p3)))))

(forall (e x y)
  (if (jump-v3' e x y)
      (exists (ha0 p1 p2)
        (and (jump-s0' e x p1 p2) (at' ha0 y p2)))))

(forall (e p1 p2 p3 x)
  (if (jump-v13-14-15' e x p1 p2 p3)
      (exists (e1 e2 e3 ha0 ha1 ha2 s)
        (and (change' e e1 e2) (at' e1 x p1) (at' e2 x p2) (not' ha0 e3)
             (at' e3 x p3) (lts' ha1 p1 p3 s) (lts' ha2 p3 p2 s)))))

(forall (e x y)
  (if (source-n1' e x y)
      (exists (b ha0 s)
        (and (hasScale??' ha0 y s) (bottom' e b s) (at' b x)))))

(forall (e m s)
  (if (source-n2-4-5-9' e s m)
      (exists (e0 ha0 y)
        (and (in' e m s) (possible' ha0 e0) (get-s?' e0 y m)))))

(forall (e e0 x)
  (if (source-n6-3' e x e0)
      (cause' e x e0)))

(forall (e m s x)
  (if (source-v1' e x m s)
      (exists (e1)
        (and (in' e m s) (changeTo' e e1) (get-s?' e1 x m s)))))

(forall (e s x)
  (if (source-v2' e x s)
      (exists (ha0 m)
        (and (mention' e x s) (source-n9' ha0 s m)))))

(forall (e0 e1 t)
  (if (threshold-n5' e0 t e1)
      (exists (ha0)
        (Rexist' ha0 e0 e1)))))

(forall (e0 t)
  (if (threshold-n3' e0 t)
      (exists (e1 ha0 y)
        (and (threshold-n5' e0 t e1) (inside' e1 y) (building' ha0 y)))))

(forall (e0 e1 t)
  (if (threshold-n2' e0 t e1)
      (exists (x y)
        (and (threshold-n5' e0 t e1) (sense' e1 x y)))))

(forall (e e1 t)
  (if (threshold-n1' e t e1)
      (exists (e0 ha0 ha1)
        (and (threshold-n5' e0 t e1) (new' ha0 e1) (time' ha1 t)))))

(forall (e x y z)
  (if (reproduce-s0' e x y z)
      (exists (e0 e1 ha0 ha1)
        (and (cause' e x e0) (changeTo' e0 e1) (Rexist' ha0 e1 z)
             (copyOf' ha1 z y)))))

(forall (e x)
  (if (reproduce-v2' e x)
      (exists (e0 e1 ha0 ha1 z)
        (and (cause' e x e0) (changeTo' e0 e1) (Rexist' ha0 e1 z)
             (childOf' ha1 z x)))))

(forall (e e0)
  (if (reproduction-n1-5' e e0)
      (exists (x)
        (reproduce-v2' e0 x)))))

(forall (e e0)
  (if (reproduction-n2' e e0)
      (exists (x)
        (reproduce-v4' e0 x)))))

(forall (e z)
  (if (reproduction-n3' e z)
      (exists (x y)
        (reproduce-v1' e x y z)))))

(forall (e e0)
  (if (reproduction-n4' e e0)
      (exists (x y z)
        (reproduce-v1' e0 x y z)))))

(forall (e e0 x y)
  (if (restore-s0' e x y e0)
      (exists (e1 e2 ha0 ha1 ha2 ha3 ha4)
        (and (cause' e x e1) (change' e1 e2 e0) (arg' ha0 x e2)
             (arg' ha1 x e0) (bad' ha2 e2) (good' ha3 e0)
             (before' ha4 e0 e)))))

(forall (e x y z)
  (if (restore-v3' e x y z)
      (exists (e0 e1 ha0)
        (and (cause' e x e0) (changeTo' e0 e1) (have' e1 z y)
             (before' ha0 e0 e)))))

(forall (e e1)
  (if (restore-n2-4' e e1)
      (exists (e0 x y)
        (restore-s0' e1 x y e0)))))

(forall (e e1)
  (if (restore-n3' e e1)
      (exists (x y z)
        (restore-v3' e1 x y z)))))

(forall (e0 x)
  (if (restore-n5' e0 x)
      (exists (e1 y)
        (restore-s0' e1 x y e0)))))

(forall (e e0 x y)
  (if (adopt-s0' e x y e0)
      (and (changeTo' e e0) (rel' e0 x y)))

(forall (e e0 x y)
  (if (adopt-s0-1' e x y e0)
      (exists (e1 z)
        (and (adopt-s0' e x y e0) (rel' e1 z y)))))

(forall (e x y)
  (if (adopt-v1-2-7' e x y)
      (exists (e0)
        (and (adopt-s0-1' e x y e0) (believe' e0 x y)))))
